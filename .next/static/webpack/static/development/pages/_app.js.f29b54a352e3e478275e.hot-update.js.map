{"version":3,"file":"static/webpack/static/development/pages/_app.js.f29b54a352e3e478275e.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["// import App from 'next/app'\n// import React from 'react'\n// import { Provider } from 'react-redux'\n// import { ThemeProvider } from 'styled-components'\n// import store from './store'\n\n// export default class MyApp extends App {\n//   render() {\n//     const { Component, pageProps } = this.props\n//     return (\n//       <Provider store={store}>\n//         <ThemeProvider theme={theme}>\n//           <Component {...pageProps} />\n//         </ThemeProvider>\n//       </Provider>\n//     )\n//   }\n// }\n\n// pages/_app.tsx\n// import withRedux, { MakeStore } from 'next-redux-wrapper';\n// import App, { AppContext } from 'next/app';\n// import { Provider } from 'react-redux';\n// import { configureStore } from '@reduxjs/toolkit'\n// import rootReducer, { RootState } from '../reducers/rootReducer'\n\n// /**\n//  * @param initialState The store's initial state (on the client side, the state of the server-side store is passed here)\n//  */\n\n// const makeStore: MakeStore = (initialState: RootState) => {\n//   return configureStore({\n//     reducer: rootReducer,\n//     ...{preloadedState: initialState}\n//   });\n// };\n\n// pages/_app.jsx\nimport React from \"react\";\nimport withRedux from 'next-redux-wrapper';\nimport App from 'next/app';\nimport { configureStore } from '@reduxjs/toolkit'\nimport { ThemeProvider } from 'styled-components'\nimport { Provider } from 'react-redux'\nimport rootReducer from '../reducers/rootReducer'\n\n/**\n* @param {object} initialState The store's initial state (on the client side, the state of the server-side store is passed here)\n* @param {boolean} options.isServer Indicates whether makeStore is executed on the server or the client side\n* @param {Request} options.req Node.js `Request` object (only set before `getInitialProps` on the server side)\n* @param {Response} options.res Node.js `Response` object (only set before `getInitialProps` on the server side)\n* @param {boolean} options.debug User-defined debug flag\n* @param {string} options.storeKey The key that will be used to persist the store in the browser's `window` object for safe HMR\n*/\n\nconst theme = {\n  fontSize: {\n    base: '16px'\n  }\n}\n\nconst makeStore = (initialState, options) => {\n  return configureStore({\n    reducer: rootReducer,\n    ...{preloadedState: initialState}\n  });\n};\n\nclass MyApp extends App {\n    static async getInitialProps({Component, ctx}) {\n        const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n        return {pageProps};\n    }\n\n    render() {\n        const {Component, pageProps, store} = this.props;\n        return (\n            <Provider store={store}>\n              <ThemeProvider theme={theme}>\n                <Component {...pageProps} />\n              </ThemeProvider>\n            </Provider>\n        );\n    }\n}\n\nexport default withRedux(makeStore)(MyApp);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AADA;AAEA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;AAdA;AACA;AAAA;;;;;;AAAA;AACA;;;;;;;AADA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;AAJA;AACA;AAiBA;;;;A","sourceRoot":""}