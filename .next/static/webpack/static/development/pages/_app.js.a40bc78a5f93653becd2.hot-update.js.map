{"version":3,"file":"static/webpack/static/development/pages/_app.js.a40bc78a5f93653becd2.hot-update.js","sources":["webpack:///./reducers/usersSlice.ts"],"sourcesContent":["import {\n  createAsyncThunk,\n  createSlice,\n  createAction\n} from '@reduxjs/toolkit'\nimport { getUserAccess, postNewUser } from '../utils/asyncActions'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nexport type UserObj = {\n  username: string,\n  email: string,\n  password: string\n}\n\nexport type LoginObj = {\n  user: string,\n  pass: string\n}\n\nfunction withPayloadType<T>() {\n  return (t: T) => ({ payload: t })\n}\n\nconst usersLoading = createAction('users/loading')\nconst usersReceived = createAction<string, 'users/received'>('users/received')\nconst logUsers = createAction('users/log')\nconst setCurrentUser =  createAction('users/setUser', withPayloadType<LoginObj>())\n\nexport const registerUser = createAsyncThunk('users/createUser', async (obj: UserObj, thunkAPI) => {\n  return await postNewUser(obj)\n})\n\nexport const loginUser = createAsyncThunk('users/login', async (obj: LoginObj, thunkAPI) => {\n  return await getUserAccess(obj)\n})\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    currentUser: {},\n    usersArray: []\n  },\n  reducers: {\n    [setCurrentUser.type]: (state, action) => {\n      state.currentUser = action.payload\n      console.log(state.currentUser)\n      return state\n    },\n    [usersLoading.type] : (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    },\n    [usersReceived.type] : (state, action) => {\n      if (state.loading === 'pending') {\n        state.loading = 'idle'\n        state.usersArray = action.payload\n      }\n    },\n    [logUsers.type] : (state, action) => {\n      console.log('Log Users:', state.usersArray)\n      return state\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.fulfilled, (state, action) => {\n      state.currentUser = action.payload\n      return state\n    })\n  }\n})\n\nconst { actions, reducer } = usersSlice\nexport default reducer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAqCA;AAAA;AACA;;;;A","sourceRoot":""}