{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _reducers;\n\nimport { createAsyncThunk, createSlice, createAction } from '@reduxjs/toolkit';\nimport { getUserAccess, postNewUser } from '../utils/asyncActions'; // TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nexport var usersLoading = createAction('users/loading');\nexport var usersReceived = createAction('users/received');\nexport var logUsers = createAction('users/log');\nexport var setCurrentUser = createAction('users/setUser');\nvar usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    currentUser: {},\n    usersArray: []\n  },\n  reducers: (_reducers = {}, _defineProperty(_reducers, setCurrentUser.type, function (state, action) {\n    state.currentUser = action.payload;\n    return state;\n  }), _defineProperty(_reducers, usersLoading.type, function (state, action) {\n    if (state.loading === 'idle') {\n      state.loading = 'pending';\n    }\n  }), _defineProperty(_reducers, usersReceived.type, function (state, action) {\n    if (state.loading === 'pending') {\n      state.loading = 'idle';\n      state.usersArray = action.payload;\n    }\n  }), _defineProperty(_reducers, logUsers.type, function (state, action) {\n    console.log('Log Users:', state.usersArray);\n    return state;\n  }), _reducers) // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n  //   }\n  // }\n\n});\nexport var registerUser = createAsyncThunk('users/createUser', function _callee(obj) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(postNewUser(obj));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nexport var loginUser = createAsyncThunk('users/login', function _callee2(obj) {\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(getUserAccess(obj).then(function (user) {\n            return setCurrentUser();\n          }));\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar actions = usersSlice.actions,\n    reducer = usersSlice.reducer;\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["createAsyncThunk","createSlice","createAction","getUserAccess","postNewUser","usersLoading","usersReceived","logUsers","setCurrentUser","usersSlice","name","initialState","loading","currentUser","usersArray","reducers","type","state","action","payload","console","log","registerUser","obj","loginUser","then","user","actions","reducer"],"mappings":";;;;;AAAA,SACEA,gBADF,EAEEC,WAFF,EAGEC,YAHF,QAIO,kBAJP;AAKA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,uBAA3C,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAaA,OAAO,IAAMC,YAAY,GAAGH,YAAY,CAAC,eAAD,CAAjC;AACP,OAAO,IAAMI,aAAa,GAAGJ,YAAY,CAAC,gBAAD,CAAlC;AACP,OAAO,IAAMK,QAAQ,GAAGL,YAAY,CAAC,WAAD,CAA7B;AACP,OAAO,IAAMM,cAAc,GAAGN,YAAY,CAAC,eAAD,CAAnC;AAEP,IAAMO,UAAU,GAAGR,WAAW,CAAC;AAC7BS,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,WAAW,EAAE,EAFD;AAGZC,IAAAA,UAAU,EAAE;AAHA,GAFe;AAO7BC,EAAAA,QAAQ,8CACLP,cAAc,CAACQ,IADV,EACiB,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxCD,IAAAA,KAAK,CAACJ,WAAN,GAAoBK,MAAM,CAACC,OAA3B;AACA,WAAOF,KAAP;AACD,GAJK,8BAKLZ,YAAY,CAACW,IALR,EAKgB,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACvC,QAAID,KAAK,CAACL,OAAN,KAAkB,MAAtB,EAA8B;AAC5BK,MAAAA,KAAK,CAACL,OAAN,GAAgB,SAAhB;AACD;AACF,GATK,8BAULN,aAAa,CAACU,IAVT,EAUiB,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxC,QAAID,KAAK,CAACL,OAAN,KAAkB,SAAtB,EAAiC;AAC/BK,MAAAA,KAAK,CAACL,OAAN,GAAgB,MAAhB;AACAK,MAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACC,OAA1B;AACD;AACF,GAfK,8BAgBLZ,QAAQ,CAACS,IAhBJ,EAgBY,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACnCE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,KAAK,CAACH,UAAhC;AACA,WAAOG,KAAP;AACD,GAnBK,aAPqB,CA4B7B;AACA;AAEA;AACA;;AAhC6B,CAAD,CAA9B;AAmCA,OAAO,IAAMK,YAAY,GAAGtB,gBAAgB,CAAC,kBAAD,EAAqB,iBAAOuB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAClDnB,WAAW,CAACmB,GAAD,CADuC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB,CAArC;AAIP,OAAO,IAAMC,SAAS,GAAGxB,gBAAgB,CAAC,aAAD,EAAgB,kBAAOuB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC1CpB,aAAa,CAACoB,GAAD,CAAb,CAAmBE,IAAnB,CAAwB,UAAAC,IAAI;AAAA,mBAAIlB,cAAc,EAAlB;AAAA,WAA5B,CAD0C;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB,CAAlC;IAICmB,O,GAAqBlB,U,CAArBkB,O;IAASC,O,GAAYnB,U,CAAZmB,O;AACjB,eAAeA,OAAf","sourcesContent":["import {\n  createAsyncThunk,\n  createSlice,\n  createAction\n} from '@reduxjs/toolkit'\nimport { getUserAccess, postNewUser } from '../utils/asyncActions'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nexport type RegistrationObj = {\n  username: string,\n  email: string,\n  password: string\n}\n\nexport type LoginObj = {\n  user: string,\n  pass: string\n}\n\nexport const usersLoading = createAction('users/loading')\nexport const usersReceived = createAction('users/received')\nexport const logUsers = createAction('users/log')\nexport const setCurrentUser = createAction('users/setUser')\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    currentUser: {},\n    usersArray: []\n  },\n  reducers: {\n    [setCurrentUser.type]: (state, action) => {\n      state.currentUser = action.payload\n      return state\n    },\n    [usersLoading.type] : (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    },\n    [usersReceived.type] : (state, action) => {\n      if (state.loading === 'pending') {\n        state.loading = 'idle'\n        state.usersArray = action.payload\n      }\n    },\n    [logUsers.type] : (state, action) => {\n      console.log('Log Users:', state.usersArray)\n      return state\n    }\n  },\n  // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n\n  //   }\n  // }\n})\n\nexport const registerUser = createAsyncThunk('users/createUser', async (obj: RegistrationObj) => {\n  return await postNewUser(obj)\n})\n\nexport const loginUser = createAsyncThunk('users/login', async (obj: LoginObj) => {\n  return await getUserAccess(obj).then(user => setCurrentUser())\n})\n\nconst { actions, reducer } = usersSlice\nexport default reducer"]},"metadata":{},"sourceType":"module"}