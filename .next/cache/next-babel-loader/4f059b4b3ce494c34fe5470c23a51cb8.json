{"ast":null,"code":"var _jsxFileName = \"/Users/bradras/Projects/justswap.it/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import App from 'next/app'\n// import React from 'react'\n// import { Provider } from 'react-redux'\n// import { ThemeProvider } from 'styled-components'\n// import store from './store'\n// export default class MyApp extends App {\n//   render() {\n//     const { Component, pageProps } = this.props\n//     return (\n//       <Provider store={store}>\n//         <ThemeProvider theme={theme}>\n//           <Component {...pageProps} />\n//         </ThemeProvider>\n//       </Provider>\n//     )\n//   }\n// }\n// pages/_app.tsx\n// import withRedux, { MakeStore } from 'next-redux-wrapper';\n// import App, { AppContext } from 'next/app';\n// import { Provider } from 'react-redux';\n// import { configureStore } from '@reduxjs/toolkit'\n// import rootReducer, { RootState } from '../reducers/rootReducer'\n// /**\n//  * @param initialState The store's initial state (on the client side, the state of the server-side store is passed here)\n//  */\n// const makeStore: MakeStore = (initialState: RootState) => {\n//   return configureStore({\n//     reducer: rootReducer,\n//     ...{preloadedState: initialState}\n//   });\n// };\n// pages/_app.jsx\nimport React from \"react\";\nimport withRedux from 'next-redux-wrapper';\nimport App from 'next/app';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport rootReducer from '../reducers/rootReducer';\n/**\n* @param {object} initialState The store's initial state (on the client side, the state of the server-side store is passed here)\n* @param {boolean} options.isServer Indicates whether makeStore is executed on the server or the client side\n* @param {Request} options.req Node.js `Request` object (only set before `getInitialProps` on the server side)\n* @param {Response} options.res Node.js `Response` object (only set before `getInitialProps` on the server side)\n* @param {boolean} options.debug User-defined debug flag\n* @param {string} options.storeKey The key that will be used to persist the store in the browser's `window` object for safe HMR\n*/\n// const theme = {\n//   fontSize: {\n//     base: '16px'\n//   }\n// }\n\nconst makeStore = (initialState, options) => {\n  return configureStore(_objectSpread({\n    reducer: rootReducer\n  }, {\n    preloadedState: initialState\n  }));\n};\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, __jsx(ThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }))));\n  }\n\n}\n\nexport default withRedux(makeStore)(MyApp);","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/pages/_app.js"],"names":["React","withRedux","App","configureStore","ThemeProvider","Provider","rootReducer","makeStore","initialState","options","reducer","preloadedState","MyApp","getInitialProps","Component","ctx","pageProps","render","store","props","theme"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA;;;;;;;;AASA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAC3C,SAAON,cAAc;AACnBO,IAAAA,OAAO,EAAEJ;AADU,KAEhB;AAACK,IAAAA,cAAc,EAAEH;AAAjB,GAFgB,EAArB;AAID,CALD;;AAOA,MAAMI,KAAN,SAAoBV,GAApB,CAAwB;AACpB,eAAaW,eAAb,CAA6B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA7B,EAA+C;AAC3C,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GAA4B,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlC,GAAmE,EAArF;AACA,WAAO;AAACC,MAAAA;AAAD,KAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAACH,MAAAA,SAAD;AAAYE,MAAAA,SAAZ;AAAuBE,MAAAA;AAAvB,QAAgC,KAAKC,KAA3C;AACA,WACI,MAAC,QAAD;AAAU,MAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD;AAAe,MAAA,KAAK,EAAEE,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,eAAeJ,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF,CADJ;AAOH;;AAfmB;;AAkBxB,eAAef,SAAS,CAACM,SAAD,CAAT,CAAqBK,KAArB,CAAf","sourcesContent":["// import App from 'next/app'\n// import React from 'react'\n// import { Provider } from 'react-redux'\n// import { ThemeProvider } from 'styled-components'\n// import store from './store'\n\n// export default class MyApp extends App {\n//   render() {\n//     const { Component, pageProps } = this.props\n//     return (\n//       <Provider store={store}>\n//         <ThemeProvider theme={theme}>\n//           <Component {...pageProps} />\n//         </ThemeProvider>\n//       </Provider>\n//     )\n//   }\n// }\n\n// pages/_app.tsx\n// import withRedux, { MakeStore } from 'next-redux-wrapper';\n// import App, { AppContext } from 'next/app';\n// import { Provider } from 'react-redux';\n// import { configureStore } from '@reduxjs/toolkit'\n// import rootReducer, { RootState } from '../reducers/rootReducer'\n\n// /**\n//  * @param initialState The store's initial state (on the client side, the state of the server-side store is passed here)\n//  */\n\n// const makeStore: MakeStore = (initialState: RootState) => {\n//   return configureStore({\n//     reducer: rootReducer,\n//     ...{preloadedState: initialState}\n//   });\n// };\n\n// pages/_app.jsx\nimport React from \"react\";\nimport withRedux from 'next-redux-wrapper';\nimport App from 'next/app';\nimport { configureStore } from '@reduxjs/toolkit'\nimport { ThemeProvider } from 'styled-components'\nimport { Provider } from 'react-redux'\nimport rootReducer from '../reducers/rootReducer'\n\n/**\n* @param {object} initialState The store's initial state (on the client side, the state of the server-side store is passed here)\n* @param {boolean} options.isServer Indicates whether makeStore is executed on the server or the client side\n* @param {Request} options.req Node.js `Request` object (only set before `getInitialProps` on the server side)\n* @param {Response} options.res Node.js `Response` object (only set before `getInitialProps` on the server side)\n* @param {boolean} options.debug User-defined debug flag\n* @param {string} options.storeKey The key that will be used to persist the store in the browser's `window` object for safe HMR\n*/\n\n// const theme = {\n//   fontSize: {\n//     base: '16px'\n//   }\n// }\n\nconst makeStore = (initialState, options) => {\n  return configureStore({\n    reducer: rootReducer,\n    ...{preloadedState: initialState}\n  });\n};\n\nclass MyApp extends App {\n    static async getInitialProps({Component, ctx}) {\n        const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n        return {pageProps};\n    }\n\n    render() {\n        const {Component, pageProps, store} = this.props;\n        return (\n            <Provider store={store}>\n              <ThemeProvider theme={theme}>\n                <Component {...pageProps} />\n              </ThemeProvider>\n            </Provider>\n        );\n    }\n}\n\nexport default withRedux(makeStore)(MyApp);"]},"metadata":{},"sourceType":"module"}