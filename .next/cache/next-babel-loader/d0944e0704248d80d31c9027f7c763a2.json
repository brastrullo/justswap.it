{"ast":null,"code":"import { createAsyncThunk, createSlice, createAction } from '@reduxjs/toolkit';\nimport { postNewUser } from '../utils/asyncActions'; // TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nconst registerUser = createAsyncThunk('users/createUser', async obj => {\n  await postNewUser(obj);\n});\nexport const usersLoading = createAction('users/loading');\nexport const usersReceived = createAction('users/received');\nexport const logUsers = createAction('users/log');\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    usersArray: []\n  },\n  reducers: {\n    [usersLoading.type]: (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending';\n      }\n    },\n    [usersReceived.type]: (state, action) => {\n      if (state.loading === 'pending') {\n        state.loading = 'idle';\n        state.usersArray = action.payload;\n      }\n    },\n    [logUsers.type]: (state, action) => {\n      console.log('Log Users:', state);\n      return state;\n    }\n  } // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n  //   }\n  // }\n\n});\nconst {\n  actions,\n  reducer\n} = usersSlice;\nexport { registerUser };\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["createAsyncThunk","createSlice","createAction","postNewUser","registerUser","obj","usersLoading","usersReceived","logUsers","usersSlice","name","initialState","loading","usersArray","reducers","type","state","action","payload","console","log","actions","reducer"],"mappings":"AAAA,SACEA,gBADF,EAEEC,WAFF,EAGEC,YAHF,QAIO,kBAJP;AAKA,SAASC,WAAT,QAA4B,uBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGJ,gBAAgB,CAAC,kBAAD,EAAqB,MAAOK,GAAP,IAAe;AACvE,QAAMF,WAAW,CAACE,GAAD,CAAjB;AACD,CAFoC,CAArC;AAIA,OAAO,MAAMC,YAAY,GAAGJ,YAAY,CAAC,eAAD,CAAjC;AACP,OAAO,MAAMK,aAAa,GAAGL,YAAY,CAAC,gBAAD,CAAlC;AACP,OAAO,MAAMM,QAAQ,GAAGN,YAAY,CAAC,WAAD,CAA7B;AAEP,MAAMO,UAAU,GAAGR,WAAW,CAAC;AAC7BS,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,UAAU,EAAE;AAFA,GAFe;AAM7BC,EAAAA,QAAQ,EAAE;AACR,KAACR,YAAY,CAACS,IAAd,GAAsB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,UAAID,KAAK,CAACJ,OAAN,KAAkB,MAAtB,EAA8B;AAC5BI,QAAAA,KAAK,CAACJ,OAAN,GAAgB,SAAhB;AACD;AACF,KALO;AAMR,KAACL,aAAa,CAACQ,IAAf,GAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAID,KAAK,CAACJ,OAAN,KAAkB,SAAtB,EAAiC;AAC/BI,QAAAA,KAAK,CAACJ,OAAN,GAAgB,MAAhB;AACAI,QAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACC,OAA1B;AACD;AACF,KAXO;AAYR,KAACV,QAAQ,CAACO,IAAV,GAAkB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnCE,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,KAA1B;AACA,aAAOA,KAAP;AACD;AAfO,GANmB,CAuB7B;AACA;AAEA;AACA;;AA3B6B,CAAD,CAA9B;AA8BA,MAAM;AAAEK,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBb,UAA7B;AACA,SAASL,YAAT;AACA,eAAekB,OAAf","sourcesContent":["import {\n  createAsyncThunk,\n  createSlice,\n  createAction\n} from '@reduxjs/toolkit'\nimport { postNewUser } from '../utils/asyncActions'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nconst registerUser = createAsyncThunk('users/createUser', async (obj) => {\n  await postNewUser(obj)\n})\n\nexport const usersLoading = createAction('users/loading')\nexport const usersReceived = createAction('users/received')\nexport const logUsers = createAction('users/log')\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    usersArray: []\n  },\n  reducers: {\n    [usersLoading.type] : (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    },\n    [usersReceived.type] : (state, action) => {\n      if (state.loading === 'pending') {\n        state.loading = 'idle'\n        state.usersArray = action.payload\n      }\n    },\n    [logUsers.type] : (state, action) => {\n      console.log('Log Users:', state)\n      return state\n    }\n  },\n  // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n\n  //   }\n  // }\n})\n\nconst { actions, reducer } = usersSlice\nexport { registerUser }\nexport default reducer"]},"metadata":{},"sourceType":"module"}