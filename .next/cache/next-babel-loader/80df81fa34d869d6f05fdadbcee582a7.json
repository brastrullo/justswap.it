{"ast":null,"code":"var _jsxFileName = \"/Users/bradras/Projects/justswap.it/components/RegistrationPage.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Input from './Input';\nimport Button from './Button';\n\nconst RegistrationPage = () => {\n  const registrationInit = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n  const errorMsg = {\n    username: '',\n    email: '',\n    confirmPassword: '',\n    password: ''\n  };\n  const {\n    0: registrationObj,\n    1: setRegistrationObj\n  } = useState(registrationInit);\n  const {\n    0: errorMsgObj,\n    1: setErrorMsgsObj\n  } = useState(errorMsg);\n  useEffect(() => {\n    checkValidity();\n  }, [errorMsgObj]);\n  useEffect(() => {\n    console.log(registrationObj);\n  }, [registrationObj]);\n  useEffect(() => {\n    console.log('err', errorMsgObj);\n  }, [errorMsgObj]);\n\n  const inputHandler = e => {\n    e.preventDefault();\n    setRegistrationObj(_objectSpread({}, registrationObj, {}, {\n      [e.target.id]: e.target.value\n    }));\n    setMessages(e.target);\n  };\n\n  const checkValidity = () => {\n    const arr = Object.entries(errorMsgObj);\n    console.log({\n      arr\n    });\n    arr.forEach(entry => {\n      const element = document.querySelectorAll(`#${entry[0]}`);\n      element.forEach(item => {\n        if (entry[1].length > 0) {\n          item.classList.add('error');\n          item.classList.remove('success');\n        } else {\n          item.classList.remove('error');\n          item.classList.add('success');\n        }\n      });\n    });\n  };\n\n  const setMessages = target => {\n    let pattern;\n    let err = '';\n\n    switch (true) {\n      case target.id === 'username':\n        pattern = /^.{4,10}$/;\n        !pattern.test(target.value) && (err += 'Username must be between 4-10 characters in length');\n        break;\n\n      case target.id === 'email':\n        pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        !pattern.test(target.value) && (err += 'Incorrect email format');\n        break;\n\n      case target.id === 'password' || target.id === 'confirmPassword':\n        const pMatch = registrationObj.password === registrationObj.confirmPassword;\n        const pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <= 16;\n        !pLengthCorrect && (err += 'Must be 8-16 characters in length. ');\n        !pMatch && (err += 'Passwords must match. ');\n\n      default:\n        break;\n    }\n\n    target.id === 'password' || target.id === 'confirmPassword' ? setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, {\n      confirmPassword: `${err}`\n    })) : setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, {\n      [target.id]: `${err}`\n    }));\n  }; // const checkPasswords = () => {\n  //   const target = document.querySelectorAll('[autoComplete=new-password]')\n  //   const pMatch = registrationObj.password === registrationObj.confirmPassword\n  //   const pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <=16\n  //   if (pMatch && pLengthCorrect) {\n  //     target.forEach(element => {\n  //       element.classList.remove('error')\n  //       element.classList.add('success')\n  //     })\n  //     setErrorMsgsObj({...errorMsgObj, ...{ password: '', confirmPassword: ''}})\n  //   } else {\n  //     let err='';\n  //     target.forEach(element => {\n  //       element.classList.add('error')\n  //       element.classList.remove('success')\n  //     })\n  //     !pLengthCorrect && (err+='Must be 8-16 characters in length. ')\n  //     !pMatch && (err+='Passwords must match. ')\n  //     setErrorMsgsObj({...errorMsgObj, ...{ password: `${err}` }})\n  //   }\n  // }\n\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, __jsx(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"Register Account\"), __jsx(Input, {\n    id: \"username\",\n    label: \"Username\",\n    min: \"4\",\n    max: \"10\",\n    value: registrationObj.username,\n    error: errorMsgObj.username,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"email\",\n    label: \"Email\",\n    value: registrationObj.email,\n    error: errorMsgObj.email,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    min: \"8\",\n    max: \"16\",\n    autoComplete: \"new-password\",\n    value: registrationObj.password,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"confirmPassword\",\n    label: \"Confirm Password\",\n    type: \"password\",\n    min: \"8\",\n    max: \"16\",\n    autoComplete: \"new-password\",\n    value: registrationObj.confirmPassword,\n    error: errorMsgObj.confirmPassword,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    text: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default RegistrationPage;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/components/RegistrationPage.tsx"],"names":["useState","useEffect","Input","Button","RegistrationPage","registrationInit","username","email","password","confirmPassword","errorMsg","registrationObj","setRegistrationObj","errorMsgObj","setErrorMsgsObj","checkValidity","console","log","inputHandler","e","preventDefault","target","id","value","setMessages","arr","Object","entries","forEach","entry","element","document","querySelectorAll","item","length","classList","add","remove","pattern","err","test","pMatch","pLengthCorrect"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,QAAQ,EAAE,EADa;AAEvBC,IAAAA,KAAK,EAAE,EAFgB;AAGvBC,IAAAA,QAAQ,EAAE,EAHa;AAIvBC,IAAAA,eAAe,EAAE;AAJM,GAAzB;AAMA,QAAMC,QAAQ,GAAG;AACfJ,IAAAA,QAAQ,EAAE,EADK;AAEfC,IAAAA,KAAK,EAAE,EAFQ;AAGfE,IAAAA,eAAe,EAAE,EAHF;AAIfD,IAAAA,QAAQ,EAAE;AAJK,GAAjB;AAMA,QAAM;AAAA,OAACG,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAACK,gBAAD,CAAtD;AACA,QAAM;AAAA,OAACQ,WAAD;AAAA,OAAcC;AAAd,MAAiCd,QAAQ,CAACU,QAAD,CAA/C;AAEAT,EAAAA,SAAS,CAAC,MAAM;AAACc,IAAAA,aAAa;AAAG,GAAxB,EAA0B,CAACF,WAAD,CAA1B,CAAT;AACAZ,EAAAA,SAAS,CAAC,MAAM;AAAEe,IAAAA,OAAO,CAACC,GAAR,CAAYN,eAAZ;AAA8B,GAAvC,EAAyC,CAACA,eAAD,CAAzC,CAAT;AACAV,EAAAA,SAAS,CAAC,MAAM;AAAEe,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBJ,WAAnB;AAAiC,GAA1C,EAA4C,CAACA,WAAD,CAA5C,CAAT;;AAEA,QAAMK,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACAR,IAAAA,kBAAkB,mBACbD,eADa,MAEb;AAAE,OAACQ,CAAC,CAACE,MAAF,CAASC,EAAV,GAAeH,CAAC,CAACE,MAAF,CAASE;AAA1B,KAFa,EAAlB;AAIAC,IAAAA,WAAW,CAACL,CAAC,CAACE,MAAH,CAAX;AACD,GAPD;;AASA,QAAMN,aAAa,GAAG,MAAM;AAC1B,UAAMU,GAAG,GAAGC,MAAM,CAACC,OAAP,CAAed,WAAf,CAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACQ,MAAAA;AAAD,KAAZ;AACAA,IAAAA,GAAG,CAACG,OAAJ,CAAYC,KAAK,IAAI;AACnB,YAAMC,OAAO,GAAGC,QAAQ,CAACC,gBAAT,CAA2B,IAAGH,KAAK,CAAC,CAAD,CAAI,EAAvC,CAAhB;AACAC,MAAAA,OAAO,CAACF,OAAR,CAAgBK,IAAI,IAAI;AACtB,YAAIJ,KAAK,CAAC,CAAD,CAAL,CAASK,MAAT,GAAkB,CAAtB,EAAyB;AACvBD,UAAAA,IAAI,CAACE,SAAL,CAAeC,GAAf,CAAmB,OAAnB;AACAH,UAAAA,IAAI,CAACE,SAAL,CAAeE,MAAf,CAAsB,SAAtB;AACD,SAHD,MAGO;AACLJ,UAAAA,IAAI,CAACE,SAAL,CAAeE,MAAf,CAAsB,OAAtB;AACAJ,UAAAA,IAAI,CAACE,SAAL,CAAeC,GAAf,CAAmB,SAAnB;AACD;AACF,OARD;AASD,KAXD;AAaD,GAhBD;;AAkBA,QAAMZ,WAAW,GAAIH,MAAD,IAAY;AAC9B,QAAIiB,OAAJ;AACA,QAAIC,GAAG,GAAG,EAAV;;AACA,YAAO,IAAP;AACE,WAAKlB,MAAM,CAACC,EAAP,KAAc,UAAnB;AACEgB,QAAAA,OAAO,GAAG,WAAV;AACA,SAACA,OAAO,CAACE,IAAR,CAAanB,MAAM,CAACE,KAApB,CAAD,KACGgB,GAAG,IAAG,oDADT;AAEA;;AACF,WAAKlB,MAAM,CAACC,EAAP,KAAc,OAAnB;AACEgB,QAAAA,OAAO,GAAG,wJAAV;AACA,SAACA,OAAO,CAACE,IAAR,CAAanB,MAAM,CAACE,KAApB,CAAD,KACGgB,GAAG,IAAG,wBADT;AAEA;;AACF,WAAKlB,MAAM,CAACC,EAAP,KAAc,UAAd,IAA4BD,MAAM,CAACC,EAAP,KAAc,iBAA/C;AACE,cAAMmB,MAAM,GAAG9B,eAAe,CAACH,QAAhB,KAA6BG,eAAe,CAACF,eAA5D;AACA,cAAMiC,cAAc,GAAG/B,eAAe,CAACH,QAAhB,CAAyB0B,MAAzB,IAAmC,CAAnC,IAAwCvB,eAAe,CAACH,QAAhB,CAAyB0B,MAAzB,IAAkC,EAAjG;AACA,SAACQ,cAAD,KAAoBH,GAAG,IAAE,qCAAzB;AACA,SAACE,MAAD,KAAYF,GAAG,IAAE,wBAAjB;;AACF;AACE;AAjBJ;;AAoBAlB,IAAAA,MAAM,CAACC,EAAP,KAAc,UAAd,IAA4BD,MAAM,CAACC,EAAP,KAAc,iBAA1C,GACER,eAAe,mBAAKD,WAAL,MAAqB;AAAEJ,MAAAA,eAAe,EAAG,GAAE8B,GAAI;AAA1B,KAArB,EADjB,GAEEzB,eAAe,mBAAKD,WAAL,MAAqB;AAAE,OAACQ,MAAM,CAACC,EAAR,GAAc,GAAEiB,GAAI;AAAtB,KAArB,EAFjB;AAGD,GA1BD,CA/C6B,CA2E7B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,UADL;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,GAAG,EAAC,GAHN;AAIE,IAAA,GAAG,EAAC,IAJN;AAKE,IAAA,KAAK,EAAE5B,eAAe,CAACL,QALzB;AAME,IAAA,KAAK,EAAEO,WAAW,CAACP,QANrB;AAOE,IAAA,QAAQ,EAAEY,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAWE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,KAAK,EAAC,OAFR;AAGE,IAAA,KAAK,EAAEP,eAAe,CAACJ,KAHzB;AAIE,IAAA,KAAK,EAAEM,WAAW,CAACN,KAJrB;AAKE,IAAA,QAAQ,EAAEW,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAkBE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,UADL;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,GAAG,EAAC,GAJN;AAKE,IAAA,GAAG,EAAC,IALN;AAME,IAAA,YAAY,EAAC,cANf;AAOE,IAAA,KAAK,EAAEP,eAAe,CAACH,QAPzB;AAQE,IAAA,QAAQ,EAAEU,YARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,EA4BE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,KAAK,EAAC,kBAFR;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,GAAG,EAAC,GAJN;AAKE,IAAA,GAAG,EAAC,IALN;AAME,IAAA,YAAY,EAAC,cANf;AAOE,IAAA,KAAK,EAAEP,eAAe,CAACF,eAPzB;AAQE,IAAA,KAAK,EAAEI,WAAW,CAACJ,eARrB;AASE,IAAA,QAAQ,EAAES,YATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BF,EAuCE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvCF,CADA,CADF;AA6CD,CA/ID;;AAiJA,eAAed,gBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport Input from './Input'\nimport Button from './Button'\n\nconst RegistrationPage = () => {\n  const registrationInit = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }\n  const errorMsg = {\n    username: '',\n    email: '',\n    confirmPassword: '',\n    password: ''\n  }\n  const [registrationObj, setRegistrationObj] = useState(registrationInit)\n  const [errorMsgObj, setErrorMsgsObj] = useState(errorMsg)\n\n  useEffect(() => {checkValidity()}, [errorMsgObj])\n  useEffect(() => { console.log(registrationObj) }, [registrationObj])\n  useEffect(() => { console.log('err', errorMsgObj) }, [errorMsgObj])\n\n  const inputHandler = (e) => {\n    e.preventDefault()\n    setRegistrationObj({\n      ...registrationObj,\n      ...{ [e.target.id]: e.target.value }\n    })\n    setMessages(e.target)\n  }\n\n  const checkValidity = () => {\n    const arr = Object.entries(errorMsgObj)\n    console.log({arr})\n    arr.forEach(entry => {\n      const element = document.querySelectorAll(`#${entry[0]}`)\n      element.forEach(item => {\n        if (entry[1].length > 0) {\n          item.classList.add('error')\n          item.classList.remove('success')\n        } else {\n          item.classList.remove('error')\n          item.classList.add('success')\n        }\n      })\n    })\n    \n  }\n\n  const setMessages = (target) => {\n    let pattern\n    let err = ''\n    switch(true) {\n      case target.id === 'username':\n        pattern = /^.{4,10}$/\n        !pattern.test(target.value) &&\n          (err+= 'Username must be between 4-10 characters in length')\n        break;\n      case target.id === 'email':\n        pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        !pattern.test(target.value) &&\n          (err+= 'Incorrect email format')\n        break;\n      case target.id === 'password' || target.id === 'confirmPassword':\n        const pMatch = registrationObj.password === registrationObj.confirmPassword\n        const pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <=16\n        !pLengthCorrect && (err+='Must be 8-16 characters in length. ')\n        !pMatch && (err+='Passwords must match. ')\n      default:\n        break;\n    }\n\n    target.id === 'password' || target.id === 'confirmPassword'\n    ? setErrorMsgsObj({...errorMsgObj, ...{ confirmPassword: `${err}`}})\n    : setErrorMsgsObj({...errorMsgObj, ...{ [target.id]: `${err}`}})\n  }\n\n  // const checkPasswords = () => {\n  //   const target = document.querySelectorAll('[autoComplete=new-password]')\n  //   const pMatch = registrationObj.password === registrationObj.confirmPassword\n  //   const pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <=16\n\n  //   if (pMatch && pLengthCorrect) {\n  //     target.forEach(element => {\n  //       element.classList.remove('error')\n  //       element.classList.add('success')\n  //     })\n  //     setErrorMsgsObj({...errorMsgObj, ...{ password: '', confirmPassword: ''}})\n  //   } else {\n  //     let err='';\n  //     target.forEach(element => {\n  //       element.classList.add('error')\n  //       element.classList.remove('success')\n  //     })\n  //     !pLengthCorrect && (err+='Must be 8-16 characters in length. ')\n  //     !pMatch && (err+='Passwords must match. ')\n  //     setErrorMsgsObj({...errorMsgObj, ...{ password: `${err}` }})\n  //   }\n  // }\n\n  return (\n    <>\n    <form>\n      <legend>Register Account</legend>\n      <Input\n        id=\"username\"\n        label=\"Username\"\n        min='4'\n        max='10'\n        value={registrationObj.username}\n        error={errorMsgObj.username}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"email\"\n        label=\"Email\"\n        value={registrationObj.email}\n        error={errorMsgObj.email}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        min='8'\n        max='16'\n        autoComplete=\"new-password\"\n        value={registrationObj.password}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"confirmPassword\"\n        label=\"Confirm Password\"\n        type=\"password\"\n        min='8'\n        max='16'\n        autoComplete=\"new-password\"\n        value={registrationObj.confirmPassword}\n        error={errorMsgObj.confirmPassword}\n        onChange={inputHandler}\n      />\n      <Button text=\"Submit\" />\n    </form>\n  </>\n  )\n}\n\nexport default RegistrationPage"]},"metadata":{},"sourceType":"module"}