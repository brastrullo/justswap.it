{"ast":null,"code":"var _jsxFileName = \"/Users/bradras/Projects/justswap.it/components/LoginPage.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport mockData from '../mockData.json';\nimport Input from './Input';\nimport Button from './Button'; // import GoogleLogin from 'react-google-login';\n\nconst LoginPage = () => {\n  const loginInit = {\n    user: '',\n    pass: ''\n  };\n  const {\n    0: loginObj,\n    1: setLoginObj\n  } = useState(loginInit);\n  useEffect(() => {\n    console.log(loginObj);\n  }, [loginObj]);\n\n  const inputHandler = e => {\n    e.preventDefault();\n    setLoginObj(_objectSpread({}, loginObj, {}, {\n      [e.target.id]: e.target.value\n    }));\n  }; // const responseGoogle = (response) => {\n  //   console.log(response);\n  // }\n\n\n  const doesUserExist = email => {\n    const foundUser = mockData.users.filter(user => user.email === email);\n\n    if (foundUser.length === 0) {\n      return 'User not found.';\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"Login JustSwap.it\"), __jsx(Input, {\n    id: \"user\",\n    label: \"Username\",\n    autoComplete: \"username\",\n    error: doesUserExist(loginObj.user),\n    value: loginObj.user,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"pass\",\n    label: \"Password\",\n    type: \"password\",\n    autoComplete: \"current-password\",\n    value: loginObj.pass,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    disabled: false,\n    text: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default LoginPage;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/components/LoginPage.tsx"],"names":["useState","useEffect","mockData","Input","Button","LoginPage","loginInit","user","pass","loginObj","setLoginObj","console","log","inputHandler","e","preventDefault","target","id","value","doesUserExist","email","foundUser","users","filter","length"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CACA;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,SAAS,GAAG;AAChBC,IAAAA,IAAI,EAAE,EADU;AAEhBC,IAAAA,IAAI,EAAE;AAFU,GAAlB;AAIA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAACM,SAAD,CAAxC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;;AAIA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACAL,IAAAA,WAAW,mBACND,QADM,MAEN;AAAE,OAACK,CAAC,CAACE,MAAF,CAASC,EAAV,GAAeH,CAAC,CAACE,MAAF,CAASE;AAA1B,KAFM,EAAX;AAID,GAND,CAXsB,CAmBtB;AACA;AACA;;;AAEA,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,UAAMC,SAAS,GAAGnB,QAAQ,CAACoB,KAAT,CAAeC,MAAf,CAAsBhB,IAAI,IAAIA,IAAI,CAACa,KAAL,KAAeA,KAA7C,CAAlB;;AACA,QAAIC,SAAS,CAACG,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,aAAO,iBAAP;AACD;AACF,GALD;;AAOA,SACE,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,MADL;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,YAAY,EAAC,UAHf;AAIE,IAAA,KAAK,EAAEL,aAAa,CAACV,QAAQ,CAACF,IAAV,CAJtB;AAKE,IAAA,KAAK,EAAEE,QAAQ,CAACF,IALlB;AAME,IAAA,QAAQ,EAAEM,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAUE,MAAC,KAAD;AACE,IAAA,EAAE,EAAC,MADL;AAEE,IAAA,KAAK,EAAC,UAFR;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,YAAY,EAAC,kBAJf;AAKE,IAAA,KAAK,EAAEJ,QAAQ,CAACD,IALlB;AAME,IAAA,QAAQ,EAAEK,YANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAkBE,MAAC,MAAD;AAAQ,IAAA,QAAQ,EAAE,KAAlB;AAAyB,IAAA,IAAI,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,CADA,CADF;AA+BD,CA7DD;;AA+DA,eAAeR,SAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport mockData from '../mockData.json'\nimport Input from './Input'\nimport Button from './Button'\n// import GoogleLogin from 'react-google-login';\n\nconst LoginPage = () => {\n  const loginInit = {\n    user: '',\n    pass: ''\n  }\n  const [loginObj, setLoginObj] = useState(loginInit)\n\n  useEffect(() => {\n    console.log(loginObj)\n  }, [loginObj])\n\n  const inputHandler = (e) => {\n    e.preventDefault()\n    setLoginObj({\n      ...loginObj,\n      ...{ [e.target.id]: e.target.value }\n    })\n  }\n\n  // const responseGoogle = (response) => {\n  //   console.log(response);\n  // }\n\n  const doesUserExist = (email) => {\n    const foundUser = mockData.users.filter(user => user.email === email)\n    if (foundUser.length === 0) {\n      return 'User not found.'\n    }\n  }\n\n  return (\n    <>\n    <form>\n      <legend>Login JustSwap.it</legend>\n      <Input\n        id=\"user\"\n        label=\"Username\"\n        autoComplete=\"username\"\n        error={doesUserExist(loginObj.user)}\n        value={loginObj.user}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"pass\"\n        label=\"Password\"\n        type=\"password\"\n        autoComplete=\"current-password\"\n        value={loginObj.pass}\n        onChange={inputHandler}\n      />\n      <Button disabled={false} text=\"Login\" />\n    </form>\n    {/* <GoogleLogin\n      clientId=\"658977310896-knrl3gka66fldh83dao2rhgbblmd4un9.apps.googleusercontent.com\"\n      buttonText=\"Login\"\n      onSuccess={responseGoogle}\n      onFailure={responseGoogle}\n      cookiePolicy={'single_host_origin'}\n    /> */}\n  </>\n  )\n}\n\nexport default LoginPage"]},"metadata":{},"sourceType":"module"}