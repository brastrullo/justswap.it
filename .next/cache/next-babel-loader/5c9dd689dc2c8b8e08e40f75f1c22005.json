{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bradras/Projects/justswap.it/components/RegistrationPage.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport Input from './Input';\nimport Button from './Button';\n\nvar RegistrationPage = function RegistrationPage() {\n  var registrationInit = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n  var errorMsg = {\n    username: '',\n    email: '',\n    password: ''\n  };\n\n  var _useState = useState(registrationInit),\n      registrationObj = _useState[0],\n      setRegistrationObj = _useState[1];\n\n  var _useState2 = useState(errorMsg),\n      errorMsgObj = _useState2[0],\n      setErrorMsgsObj = _useState2[1];\n\n  var _useState3 = useState({\n    id: ''\n  }),\n      currentTarget = _useState3[0],\n      setCurrentTarget = _useState3[1];\n\n  useEffect(function () {\n    if (currentTarget && currentTarget.id) {\n      (currentTarget.id === 'password' || currentTarget.id === 'confirmPassword') && registrationObj.password.length > 0 && registrationObj.confirmPassword.length > 0 && checkPasswords();\n    }\n  }, [currentTarget, registrationObj]);\n  useEffect(function () {\n    checkValidity();\n  }, [errorMsgObj]);\n  useEffect(function () {\n    console.log(registrationObj);\n  }, [registrationObj]);\n\n  var inputHandler = function inputHandler(e) {\n    e.preventDefault();\n    setRegistrationObj(_objectSpread({}, registrationObj, {}, _defineProperty({}, e.target.id, e.target.value)));\n    setCurrentTarget(e.target);\n    var pattern;\n    var err = '';\n\n    switch (true) {\n      case e.target.id === 'username':\n        pattern = /^.{4,10}$/;\n        pattern.test(e.target.value) && (err += 'Username must be between 4-10 characters in length');\n        break;\n\n      case e.target.id === 'email':\n        emailValidation(e.target.value);\n        break;\n\n      default:\n        break;\n    }\n\n    setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, _defineProperty({}, e.target.id, \"\".concat(err))));\n  };\n\n  var checkValidity = function checkValidity() {\n    console.log('asdf');\n    var arr = Object.entries(errorMsgObj);\n    arr.forEach(function (entry) {\n      var element = document.querySelectorAll(\"#\".concat(entry[0]));\n      element.forEach(function (item) {\n        if (entry[1].length > 0) {\n          item.classList.add('error');\n          item.classList.remove('success');\n        } else {\n          item.classList.remove('error');\n          item.classList.add('success');\n        }\n      });\n    });\n  }; // const isValid = (element, input, pattern) => {\n  //   let valid;\n  //   typeof pattern === 'boolean'\n  //   ? valid = pattern\n  //   : valid = pattern.test(input)\n  //   if (valid) {\n  //     element.classList.remove('error')\n  //     element.classList.add('success')\n  //     return true\n  //   } else {\n  //     element.classList.add('error')\n  //     element.classList.remove('success')\n  //     return false\n  //   }\n  // }\n  // const usernameValidation = (input) => {\n  //   const pattern = /^.{4,10}$/\n  //   let err = ''\n  //   pattern.test(input)\n  //     ? (err='')\n  //     : (err+= 'Username must be between 4-10 characters in length')\n  //   setErrorMsgsObj({...errorMsgObj, ...{ username: `${err}`}})\n  // }\n\n\n  var emailValidation = function emailValidation(input) {\n    var pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    var err = '';\n    pattern.test(input) ? err = '' : err += 'Incorrect email format';\n    setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, {\n      email: \"\".concat(err)\n    }));\n  };\n\n  var checkPasswords = function checkPasswords() {\n    var target = document.querySelectorAll('[autoComplete=new-password]');\n    var pMatch = registrationObj.password === registrationObj.confirmPassword;\n    var pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <= 16;\n\n    if (pMatch && pLengthCorrect) {\n      target.forEach(function (element) {\n        element.classList.remove('error');\n        element.classList.add('success');\n      });\n      setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, {\n        password: '',\n        confirmPassword: ''\n      }));\n    } else {\n      var err = '';\n      target.forEach(function (element) {\n        element.classList.add('error');\n        element.classList.remove('success');\n      });\n      !pLengthCorrect && (err += 'Must be 8-16 characters in length. ');\n      !pMatch && (err += 'Passwords must match. ');\n      setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, {\n        password: \"\".concat(err)\n      }));\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, __jsx(\"legend\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, \"Register Account\"), __jsx(Input, {\n    id: \"username\",\n    label: \"Username\",\n    min: \"4\",\n    max: \"10\",\n    value: registrationObj.username,\n    error: errorMsgObj.username,\n    onChange: inputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"email\",\n    label: \"Email\",\n    value: registrationObj.email,\n    error: errorMsgObj.email,\n    onChange: inputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    min: \"8\",\n    max: \"16\",\n    autoComplete: \"new-password\",\n    value: registrationObj.password,\n    onChange: inputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"confirmPassword\",\n    label: \"Confirm Password\",\n    type: \"password\",\n    min: \"8\",\n    max: \"16\",\n    autoComplete: \"new-password\",\n    value: registrationObj.confirmPassword,\n    error: errorMsgObj.password,\n    onChange: inputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    text: \"Submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default RegistrationPage;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/components/RegistrationPage.tsx"],"names":["useState","useEffect","Input","Button","RegistrationPage","registrationInit","username","email","password","confirmPassword","errorMsg","registrationObj","setRegistrationObj","errorMsgObj","setErrorMsgsObj","id","currentTarget","setCurrentTarget","length","checkPasswords","checkValidity","console","log","inputHandler","e","preventDefault","target","value","pattern","err","test","emailValidation","arr","Object","entries","forEach","entry","element","document","querySelectorAll","item","classList","add","remove","input","pMatch","pLengthCorrect"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Input from './Input'\nimport Button from './Button'\n\nconst RegistrationPage = () => {\n  const registrationInit = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }\n  const errorMsg = {\n    username: '',\n    email: '',\n    password: ''\n  }\n  const [registrationObj, setRegistrationObj] = useState(registrationInit)\n  const [errorMsgObj, setErrorMsgsObj] = useState(errorMsg)\n  const [currentTarget, setCurrentTarget] = useState({id:''})\n\n  useEffect(() => {\n    if (currentTarget && currentTarget.id) {\n      (currentTarget.id === 'password' || currentTarget.id === 'confirmPassword') &&\n      (registrationObj.password.length > 0 && registrationObj.confirmPassword.length > 0) &&\n      checkPasswords()\n    }\n  }, [currentTarget, registrationObj])\n  useEffect(() => {checkValidity()}, [errorMsgObj])\n  useEffect(() => { console.log(registrationObj) }, [registrationObj])\n\n  const inputHandler = (e) => {\n    e.preventDefault()\n    setRegistrationObj({\n      ...registrationObj,\n      ...{ [e.target.id]: e.target.value }\n    })\n    setCurrentTarget(e.target)\n    let pattern\n    let err = ''\n    switch(true) {\n      case e.target.id === 'username':\n        pattern = /^.{4,10}$/\n        pattern.test(e.target.value) &&\n          (err+= 'Username must be between 4-10 characters in length')\n        break;\n      case e.target.id === 'email':\n        emailValidation(e.target.value)\n        break;\n      default:\n        break;\n    }\n    setErrorMsgsObj({...errorMsgObj, ...{ [e.target.id]: `${err}`}})\n  }\n\n  const checkValidity = () => {\n    console.log('asdf')\n    const arr = Object.entries(errorMsgObj)\n    arr.forEach(entry => {\n      const element = document.querySelectorAll(`#${entry[0]}`)\n      element.forEach(item => {\n        if (entry[1].length > 0) {\n          item.classList.add('error')\n          item.classList.remove('success')\n        } else {\n          item.classList.remove('error')\n          item.classList.add('success')\n        }\n      })\n    })\n  }\n\n  // const isValid = (element, input, pattern) => {\n  //   let valid;\n  //   typeof pattern === 'boolean'\n  //   ? valid = pattern\n  //   : valid = pattern.test(input)\n\n  //   if (valid) {\n  //     element.classList.remove('error')\n  //     element.classList.add('success')\n  //     return true\n  //   } else {\n  //     element.classList.add('error')\n  //     element.classList.remove('success')\n  //     return false\n  //   }\n  // }\n  \n  // const usernameValidation = (input) => {\n  //   const pattern = /^.{4,10}$/\n  //   let err = ''\n  //   pattern.test(input)\n  //     ? (err='')\n  //     : (err+= 'Username must be between 4-10 characters in length')\n  //   setErrorMsgsObj({...errorMsgObj, ...{ username: `${err}`}})\n  // }\n\n  const emailValidation = (input) => {\n    let pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    let err = ''\n    pattern.test(input)\n      ? (err='')\n      : (err+= 'Incorrect email format')\n    setErrorMsgsObj({...errorMsgObj, ...{ email: `${err}`}})\n  }\n\n  const checkPasswords = () => {\n    const target = document.querySelectorAll('[autoComplete=new-password]')\n    const pMatch = registrationObj.password === registrationObj.confirmPassword\n    const pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <=16\n\n    if (pMatch && pLengthCorrect) {\n      target.forEach(element => {\n        element.classList.remove('error')\n        element.classList.add('success')\n      })\n      setErrorMsgsObj({...errorMsgObj, ...{ password: '', confirmPassword: ''}})\n    } else {\n      let err='';\n      target.forEach(element => {\n        element.classList.add('error')\n        element.classList.remove('success')\n      })\n      !pLengthCorrect && (err+='Must be 8-16 characters in length. ')\n      !pMatch && (err+='Passwords must match. ')\n      setErrorMsgsObj({...errorMsgObj, ...{ password: `${err}` }})\n    }\n  }\n\n  return (\n    <>\n    <form>\n      <legend>Register Account</legend>\n      <Input\n        id=\"username\"\n        label=\"Username\"\n        min='4'\n        max='10'\n        value={registrationObj.username}\n        error={errorMsgObj.username}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"email\"\n        label=\"Email\"\n        value={registrationObj.email}\n        error={errorMsgObj.email}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        min='8'\n        max='16'\n        autoComplete=\"new-password\"\n        value={registrationObj.password}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"confirmPassword\"\n        label=\"Confirm Password\"\n        type=\"password\"\n        min='8'\n        max='16'\n        autoComplete=\"new-password\"\n        value={registrationObj.confirmPassword}\n        error={errorMsgObj.password}\n        onChange={inputHandler}\n      />\n      <Button text=\"Submit\" />\n    </form>\n  </>\n  )\n}\n\nexport default RegistrationPage"]},"metadata":{},"sourceType":"module"}