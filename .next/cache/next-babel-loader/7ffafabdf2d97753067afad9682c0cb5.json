{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { // createAsyncThunk,\ncreateSlice } from '@reduxjs/toolkit'; // import axios from 'axios'\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n//   const response = await axios.get()\n//   return response.data\n// })\n\nvar usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    usersArray: [{\n      username: 'zxcv'\n    }]\n  },\n  reducers: {\n    logUsers: function logUsers(state, action) {\n      console.log('Users:', action.payload);\n      return _objectSpread({}, state, {}, state.usersArray);\n    },\n    createUser: function createUser(state, action) {\n      console.log({\n        state: state,\n        action: action\n      });\n      return state;\n    },\n    updateUser: function updateUser(state, action) {\n      console.log({\n        state: state,\n        action: action\n      });\n      return state;\n    },\n    deleteUser: function deleteUser(state, action) {\n      console.log({\n        state: state,\n        action: action\n      });\n      return state;\n    }\n  },\n  extraReducers: {// [fetchUsers.fulfilled]: (state, action) => {\n    //   // Add user to the state array\n    //   state.users.push(action.payload)\n    // }\n  }\n});\nvar actions = usersSlice.actions,\n    reducer = usersSlice.reducer;\nvar logUsers = actions.logUsers,\n    createUser = actions.createUser,\n    updateUser = actions.updateUser,\n    deleteUser = actions.deleteUser;\nexport { logUsers, createUser, updateUser, deleteUser };\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["createSlice","usersSlice","name","initialState","usersArray","username","reducers","logUsers","state","action","console","log","payload","createUser","updateUser","deleteUser","extraReducers","actions","reducer"],"mappings":";;;;;;AAAA,SACE;AACAA,WAFF,QAGO,kBAHP,C,CAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,IAAMC,UAAU,GAAGD,WAAW,CAAC;AAC7BE,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAD;AADA,GAFe;AAO7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QADQ,oBACCC,KADD,EACQC,MADR,EACgB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAM,CAACG,OAA7B;AACA,+BAAYJ,KAAZ,MAAsBA,KAAK,CAACJ,UAA5B;AACD,KAJO;AAKRS,IAAAA,UALQ,sBAKGL,KALH,EAKUC,MALV,EAKkB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,MAAM,EAANA;AAAT,OAAZ;AACA,aAAOD,KAAP;AACD,KARO;AASRM,IAAAA,UATQ,sBASGN,KATH,EASUC,MATV,EASkB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,MAAM,EAANA;AAAT,OAAZ;AACA,aAAOD,KAAP;AACD,KAZO;AAaRO,IAAAA,UAbQ,sBAaGP,KAbH,EAaUC,MAbV,EAakB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,MAAM,EAANA;AAAT,OAAZ;AACA,aAAOD,KAAP;AACD;AAhBO,GAPmB;AAyB7BQ,EAAAA,aAAa,EAAE,CACb;AACA;AACA;AACA;AAJa;AAzBc,CAAD,CAA9B;IAiCQC,O,GAAqBhB,U,CAArBgB,O;IAASC,O,GAAYjB,U,CAAZiB,O;IACFX,Q,GAAiDU,O,CAAjDV,Q;IAAUM,U,GAAuCI,O,CAAvCJ,U;IAAYC,U,GAA2BG,O,CAA3BH,U;IAAYC,U,GAAeE,O,CAAfF,U;;AACjD,eAAeG,OAAf","sourcesContent":["import {\n  // createAsyncThunk,\n  createSlice\n} from '@reduxjs/toolkit'\n// import axios from 'axios'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n//   const response = await axios.get()\n//   return response.data\n// })\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    usersArray: [{\n      username: 'zxcv'\n    }]\n  },\n  reducers: {\n    logUsers(state, action) {\n      console.log('Users:', action.payload)\n      return { ...state, ...state.usersArray}\n    },\n    createUser(state, action) {\n      console.log({ state, action })\n      return state\n    },\n    updateUser(state, action) {\n      console.log({ state, action })\n      return state\n    },\n    deleteUser(state, action) {\n      console.log({ state, action })\n      return state\n    },\n  },\n  extraReducers: {\n    // [fetchUsers.fulfilled]: (state, action) => {\n    //   // Add user to the state array\n    //   state.users.push(action.payload)\n    // }\n  }\n})\n\nconst { actions, reducer } = usersSlice\nexport const { logUsers, createUser, updateUser, deleteUser } = actions\nexport default reducer"]},"metadata":{},"sourceType":"module"}