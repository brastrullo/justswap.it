{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _reducers;\n\nimport { createAsyncThunk, createSlice, createAction } from '@reduxjs/toolkit';\nimport { postNewUser } from '../utils/asyncActions'; // TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nvar registerUser = createAsyncThunk('users/createUser', function _callee(obj) {\n  var res;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(postNewUser(obj));\n\n        case 2:\n          res = _context.sent;\n          return _context.abrupt(\"return\", res);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nexport var usersLoading = createAction('users/loading');\nexport var usersReceived = createAction('users/received');\nexport var logUsers = createAction('users/log');\nvar usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    usersArray: []\n  },\n  reducers: (_reducers = {}, _defineProperty(_reducers, usersLoading.type, function (state, action) {\n    if (state.loading === 'idle') {\n      state.loading = 'pending';\n    }\n  }), _defineProperty(_reducers, usersReceived.type, function (state, action) {\n    if (state.loading === 'pending') {\n      state.loading = 'idle';\n      state.usersArray = action.payload;\n    }\n  }), _defineProperty(_reducers, logUsers.type, function (state, action) {\n    console.log('Log Users:', state.usersArray);\n    return state;\n  }), _reducers) // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n  //   }\n  // }\n\n});\nvar actions = usersSlice.actions,\n    reducer = usersSlice.reducer;\nexport { registerUser };\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["createAsyncThunk","createSlice","createAction","postNewUser","registerUser","obj","res","usersLoading","usersReceived","logUsers","usersSlice","name","initialState","loading","usersArray","reducers","type","state","action","payload","console","log","actions","reducer"],"mappings":";;;;;AAAA,SACEA,gBADF,EAEEC,WAFF,EAGEC,YAHF,QAIO,kBAJP;AAKA,SAASC,WAAT,QAA4B,uBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,YAAY,GAAGJ,gBAAgB,CAAC,kBAAD,EAAqB,iBAAOK,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACtCF,WAAW,CAACE,GAAD,CAD2B;;AAAA;AAClDC,UAAAA,GADkD;AAAA,2CAEjDA,GAFiD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB,CAArC;AAKA,OAAO,IAAMC,YAAY,GAAGL,YAAY,CAAC,eAAD,CAAjC;AACP,OAAO,IAAMM,aAAa,GAAGN,YAAY,CAAC,gBAAD,CAAlC;AACP,OAAO,IAAMO,QAAQ,GAAGP,YAAY,CAAC,WAAD,CAA7B;AAEP,IAAMQ,UAAU,GAAGT,WAAW,CAAC;AAC7BU,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,UAAU,EAAE;AAFA,GAFe;AAM7BC,EAAAA,QAAQ,8CACLR,YAAY,CAACS,IADR,EACgB,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACvC,QAAID,KAAK,CAACJ,OAAN,KAAkB,MAAtB,EAA8B;AAC5BI,MAAAA,KAAK,CAACJ,OAAN,GAAgB,SAAhB;AACD;AACF,GALK,8BAMLL,aAAa,CAACQ,IANT,EAMiB,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxC,QAAID,KAAK,CAACJ,OAAN,KAAkB,SAAtB,EAAiC;AAC/BI,MAAAA,KAAK,CAACJ,OAAN,GAAgB,MAAhB;AACAI,MAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACC,OAA1B;AACD;AACF,GAXK,8BAYLV,QAAQ,CAACO,IAZJ,EAYY,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACnCE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,KAAK,CAACH,UAAhC;AACA,WAAOG,KAAP;AACD,GAfK,aANqB,CAuB7B;AACA;AAEA;AACA;;AA3B6B,CAAD,CAA9B;IA8BQK,O,GAAqBZ,U,CAArBY,O;IAASC,O,GAAYb,U,CAAZa,O;AACjB,SAASnB,YAAT;AACA,eAAemB,OAAf","sourcesContent":["import {\n  createAsyncThunk,\n  createSlice,\n  createAction\n} from '@reduxjs/toolkit'\nimport { postNewUser } from '../utils/asyncActions'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nconst registerUser = createAsyncThunk('users/createUser', async (obj) => {\n  const res = await postNewUser(obj)\n  return res\n})\n\nexport const usersLoading = createAction('users/loading')\nexport const usersReceived = createAction('users/received')\nexport const logUsers = createAction('users/log')\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    usersArray: []\n  },\n  reducers: {\n    [usersLoading.type] : (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    },\n    [usersReceived.type] : (state, action) => {\n      if (state.loading === 'pending') {\n        state.loading = 'idle'\n        state.usersArray = action.payload\n      }\n    },\n    [logUsers.type] : (state, action) => {\n      console.log('Log Users:', state.usersArray)\n      return state\n    }\n  },\n  // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n\n  //   }\n  // }\n})\n\nconst { actions, reducer } = usersSlice\nexport { registerUser }\nexport default reducer"]},"metadata":{},"sourceType":"module"}