{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { // createAsyncThunk,\ncreateSlice } from '@reduxjs/toolkit'; // import axios from 'axios'\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n//   const response = await axios.get()\n//   return response.data\n// })\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    usersArray: [{\n      username: 'zxcv'\n    }]\n  },\n  reducers: {\n    logUsers(state, action) {\n      console.log('Log Users:', state, action.payload);\n      return state;\n    },\n\n    createUser(state, action) {\n      return _objectSpread({}, state, {\n        usersArray: [...state.usersArray, action.payload]\n      });\n    },\n\n    updateUser(state, action) {\n      console.log({\n        state,\n        action\n      });\n      return state;\n    },\n\n    deleteUser(state, action) {\n      console.log({\n        state,\n        action\n      });\n      return state;\n    }\n\n  },\n  extraReducers: {// [fetchUsers.fulfilled]: (state, action) => {\n    //   // Add user to the state array\n    //   state.users.push(action.payload)\n    // }\n  }\n});\nconst {\n  actions,\n  reducer\n} = usersSlice;\nexport const {\n  logUsers,\n  createUser,\n  updateUser,\n  deleteUser\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["createSlice","usersSlice","name","initialState","usersArray","username","reducers","logUsers","state","action","console","log","payload","createUser","updateUser","deleteUser","extraReducers","actions","reducer"],"mappings":";;;;;;AAAA,SACE;AACAA,WAFF,QAGO,kBAHP,C,CAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAGD,WAAW,CAAC;AAC7BE,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAD;AADA,GAFe;AAO7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,KAA1B,EAAiCC,MAAM,CAACG,OAAxC;AACA,aAAOJ,KAAP;AACD,KAJO;;AAKRK,IAAAA,UAAU,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACxB,+BACKD,KADL;AAEEJ,QAAAA,UAAU,EAAE,CAAC,GAAGI,KAAK,CAACJ,UAAV,EAAsBK,MAAM,CAACG,OAA7B;AAFd;AAID,KAVO;;AAWRE,IAAAA,UAAU,CAACN,KAAD,EAAQC,MAAR,EAAgB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAZ;AACA,aAAOD,KAAP;AACD,KAdO;;AAeRO,IAAAA,UAAU,CAACP,KAAD,EAAQC,MAAR,EAAgB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAZ;AACA,aAAOD,KAAP;AACD;;AAlBO,GAPmB;AA2B7BQ,EAAAA,aAAa,EAAE,CACb;AACA;AACA;AACA;AAJa;AA3Bc,CAAD,CAA9B;AAmCA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBjB,UAA7B;AACA,OAAO,MAAM;AAAEM,EAAAA,QAAF;AAAYM,EAAAA,UAAZ;AAAwBC,EAAAA,UAAxB;AAAoCC,EAAAA;AAApC,IAAmDE,OAAzD;AACP,eAAeC,OAAf","sourcesContent":["import {\n  // createAsyncThunk,\n  createSlice\n} from '@reduxjs/toolkit'\n// import axios from 'axios'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n//   const response = await axios.get()\n//   return response.data\n// })\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    usersArray: [{\n      username: 'zxcv'\n    }]\n  },\n  reducers: {\n    logUsers(state, action) {\n      console.log('Log Users:', state, action.payload)\n      return state\n    },\n    createUser(state, action) {\n      return {\n        ...state,\n        usersArray: [...state.usersArray, action.payload]\n      }\n    },\n    updateUser(state, action) {\n      console.log({ state, action })\n      return state\n    },\n    deleteUser(state, action) {\n      console.log({ state, action })\n      return state\n    },\n  },\n  extraReducers: {\n    // [fetchUsers.fulfilled]: (state, action) => {\n    //   // Add user to the state array\n    //   state.users.push(action.payload)\n    // }\n  }\n})\n\nconst { actions, reducer } = usersSlice\nexport const { logUsers, createUser, updateUser, deleteUser } = actions\nexport default reducer"]},"metadata":{},"sourceType":"module"}