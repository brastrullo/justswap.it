{"ast":null,"code":"import { useDispatch } from 'react-redux';\nimport { createAsyncThunk, createSlice, createAction } from '@reduxjs/toolkit';\nimport { getUserAccess, postNewUser } from '../utils/asyncActions'; // TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nfunction withPayloadType() {\n  return t => ({\n    payload: t\n  });\n}\n\nconst dispatch = useDispatch();\nconst usersLoading = createAction('users/loading');\nconst usersReceived = createAction('users/received');\nconst logUsers = createAction('users/log');\nconst setCurrentUser = createAction('users/setUser', withPayloadType());\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    currentUser: {},\n    usersArray: []\n  },\n  reducers: {\n    [setCurrentUser.type]: (state, action) => {\n      state.currentUser = action.payload;\n      console.log(state.currentUser);\n      return state;\n    },\n    [usersLoading.type]: (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending';\n      }\n    },\n    [usersReceived.type]: (state, action) => {\n      if (state.loading === 'pending') {\n        state.loading = 'idle';\n        state.usersArray = action.payload;\n      }\n    },\n    [logUsers.type]: (state, action) => {\n      console.log('Log Users:', state.usersArray);\n      return state;\n    }\n  },\n  extraReducers: {\n    ['users/login/fulfilled']: (state, action) => {\n      state.currentUser = action.payload;\n      console.log(state.currentUser);\n      return state;\n    }\n  }\n});\nexport const registerUser = createAsyncThunk('users/createUser', async (obj, thunkAPI) => {\n  return await postNewUser(obj);\n});\nexport const loginUser = createAsyncThunk('users/login', async (obj, thunkAPI) => {\n  return await getUserAccess(obj);\n});\nconst {\n  actions,\n  reducer\n} = usersSlice;\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["useDispatch","createAsyncThunk","createSlice","createAction","getUserAccess","postNewUser","withPayloadType","t","payload","dispatch","usersLoading","usersReceived","logUsers","setCurrentUser","usersSlice","name","initialState","loading","currentUser","usersArray","reducers","type","state","action","console","log","extraReducers","registerUser","obj","thunkAPI","loginUser","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SACEC,gBADF,EAEEC,WAFF,EAGEC,YAHF,QAIO,kBAJP;AAKA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,uBAA3C,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAaA,SAASC,eAAT,GAA8B;AAC5B,SAAQC,CAAD,KAAW;AAAEC,IAAAA,OAAO,EAAED;AAAX,GAAX,CAAP;AACD;;AAED,MAAME,QAAQ,GAAGT,WAAW,EAA5B;AAEA,MAAMU,YAAY,GAAGP,YAAY,CAAC,eAAD,CAAjC;AACA,MAAMQ,aAAa,GAAGR,YAAY,CAA2B,gBAA3B,CAAlC;AACA,MAAMS,QAAQ,GAAGT,YAAY,CAAC,WAAD,CAA7B;AACA,MAAMU,cAAc,GAAIV,YAAY,CAAC,eAAD,EAAkBG,eAAe,EAAjC,CAApC;AAEA,MAAMQ,UAAU,GAAGZ,WAAW,CAAC;AAC7Ba,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,WAAW,EAAE,EAFD;AAGZC,IAAAA,UAAU,EAAE;AAHA,GAFe;AAO7BC,EAAAA,QAAQ,EAAE;AACR,KAACP,cAAc,CAACQ,IAAhB,GAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACJ,WAAN,GAAoBK,MAAM,CAACf,OAA3B;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACJ,WAAlB;AACA,aAAOI,KAAP;AACD,KALO;AAMR,KAACZ,YAAY,CAACW,IAAd,GAAsB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,UAAID,KAAK,CAACL,OAAN,KAAkB,MAAtB,EAA8B;AAC5BK,QAAAA,KAAK,CAACL,OAAN,GAAgB,SAAhB;AACD;AACF,KAVO;AAWR,KAACN,aAAa,CAACU,IAAf,GAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAID,KAAK,CAACL,OAAN,KAAkB,SAAtB,EAAiC;AAC/BK,QAAAA,KAAK,CAACL,OAAN,GAAgB,MAAhB;AACAK,QAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACf,OAA1B;AACD;AACF,KAhBO;AAiBR,KAACI,QAAQ,CAACS,IAAV,GAAkB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,KAAK,CAACH,UAAhC;AACA,aAAOG,KAAP;AACD;AApBO,GAPmB;AA6B7BI,EAAAA,aAAa,EAAE;AACb,KAAC,uBAAD,GAA2B,CAACJ,KAAD,EAAOC,MAAP,KAAkB;AAC3CD,MAAAA,KAAK,CAACJ,WAAN,GAAoBK,MAAM,CAACf,OAA3B;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACJ,WAAlB;AACA,aAAOI,KAAP;AACD;AALY;AA7Bc,CAAD,CAA9B;AAsCA,OAAO,MAAMK,YAAY,GAAG1B,gBAAgB,CAAC,kBAAD,EAAqB,OAAO2B,GAAP,EAAqBC,QAArB,KAAkC;AACjG,SAAO,MAAMxB,WAAW,CAACuB,GAAD,CAAxB;AACD,CAF2C,CAArC;AAIP,OAAO,MAAME,SAAS,GAAG7B,gBAAgB,CAAC,aAAD,EAAgB,OAAO2B,GAAP,EAAsBC,QAAtB,KAAmC;AAC1F,SAAO,MAAMzB,aAAa,CAACwB,GAAD,CAA1B;AACD,CAFwC,CAAlC;AAIP,MAAM;AAAEG,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBlB,UAA7B;AACA,eAAekB,OAAf","sourcesContent":["import { useDispatch } from 'react-redux'\nimport {\n  createAsyncThunk,\n  createSlice,\n  createAction\n} from '@reduxjs/toolkit'\nimport { getUserAccess, postNewUser } from '../utils/asyncActions'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nexport type UserObj = {\n  username: string,\n  email: string,\n  password: string\n}\n\nexport type LoginObj = {\n  user: string,\n  pass: string\n}\n\nfunction withPayloadType<T>() {\n  return (t: T) => ({ payload: t })\n}\n\nconst dispatch = useDispatch()\n\nconst usersLoading = createAction('users/loading')\nconst usersReceived = createAction<string, 'users/received'>('users/received')\nconst logUsers = createAction('users/log')\nconst setCurrentUser =  createAction('users/setUser', withPayloadType<LoginObj>())\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    currentUser: {},\n    usersArray: []\n  },\n  reducers: {\n    [setCurrentUser.type]: (state, action) => {\n      state.currentUser = action.payload\n      console.log(state.currentUser)\n      return state\n    },\n    [usersLoading.type] : (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    },\n    [usersReceived.type] : (state, action) => {\n      if (state.loading === 'pending') {\n        state.loading = 'idle'\n        state.usersArray = action.payload\n      }\n    },\n    [logUsers.type] : (state, action) => {\n      console.log('Log Users:', state.usersArray)\n      return state\n    }\n  },\n  extraReducers: {\n    ['users/login/fulfilled']: (state,action) => {\n      state.currentUser = action.payload\n      console.log(state.currentUser)\n      return state\n    }\n  }\n})\n\nexport const registerUser = createAsyncThunk('users/createUser', async (obj: UserObj, thunkAPI) => {\n  return await postNewUser(obj)\n})\n\nexport const loginUser = createAsyncThunk('users/login', async (obj: LoginObj, thunkAPI) => {\n  return await getUserAccess(obj)\n})\n\nconst { actions, reducer } = usersSlice\nexport default reducer"]},"metadata":{},"sourceType":"module"}