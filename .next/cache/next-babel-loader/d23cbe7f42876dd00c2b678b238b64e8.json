{"ast":null,"code":"import { createAsyncThunk, createSlice, createAction } from '@reduxjs/toolkit';\nimport { getUserAccess, postNewUser } from '../utils/asyncActions'; // TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nconst registerUser = createAsyncThunk('users/createUser', async obj => {\n  return await postNewUser(obj);\n});\nconst loginUser = createAsyncThunk('users/login', async obj => {\n  console.log({\n    obj\n  });\n  return await getUserAccess(obj);\n});\nexport const usersLoading = createAction('users/loading');\nexport const usersReceived = createAction('users/received');\nexport const logUsers = createAction('users/log');\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    currentUser: {},\n    usersArray: []\n  },\n  reducers: {\n    [usersLoading.type]: (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending';\n      }\n    },\n    [usersReceived.type]: (state, action) => {\n      if (state.loading === 'pending') {\n        state.loading = 'idle';\n        state.usersArray = action.payload;\n      }\n    },\n    [logUsers.type]: (state, action) => {\n      console.log('Log Users:', state.usersArray);\n      return state;\n    }\n  } // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n  //   }\n  // }\n\n});\nconst {\n  actions,\n  reducer\n} = usersSlice;\nexport { registerUser, loginUser };\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["createAsyncThunk","createSlice","createAction","getUserAccess","postNewUser","registerUser","obj","loginUser","console","log","usersLoading","usersReceived","logUsers","usersSlice","name","initialState","loading","currentUser","usersArray","reducers","type","state","action","payload","actions","reducer"],"mappings":"AAAA,SACEA,gBADF,EAEEC,WAFF,EAGEC,YAHF,QAIO,kBAJP;AAKA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,uBAA3C,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAcA,MAAMC,YAAY,GAAGL,gBAAgB,CAAC,kBAAD,EAAqB,MAAOM,GAAP,IAAgC;AACxF,SAAO,MAAMF,WAAW,CAACE,GAAD,CAAxB;AACD,CAFoC,CAArC;AAIA,MAAMC,SAAS,GAAGP,gBAAgB,CAAC,aAAD,EAAgB,MAAOM,GAAP,IAAyB;AACzEE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACH,IAAAA;AAAD,GAAZ;AACA,SAAO,MAAMH,aAAa,CAACG,GAAD,CAA1B;AACD,CAHiC,CAAlC;AAKA,OAAO,MAAMI,YAAY,GAAGR,YAAY,CAAC,eAAD,CAAjC;AACP,OAAO,MAAMS,aAAa,GAAGT,YAAY,CAAC,gBAAD,CAAlC;AACP,OAAO,MAAMU,QAAQ,GAAGV,YAAY,CAAC,WAAD,CAA7B;AAEP,MAAMW,UAAU,GAAGZ,WAAW,CAAC;AAC7Ba,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,WAAW,EAAE,EAFD;AAGZC,IAAAA,UAAU,EAAE;AAHA,GAFe;AAO7BC,EAAAA,QAAQ,EAAE;AACR,KAACT,YAAY,CAACU,IAAd,GAAsB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,UAAID,KAAK,CAACL,OAAN,KAAkB,MAAtB,EAA8B;AAC5BK,QAAAA,KAAK,CAACL,OAAN,GAAgB,SAAhB;AACD;AACF,KALO;AAMR,KAACL,aAAa,CAACS,IAAf,GAAuB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAID,KAAK,CAACL,OAAN,KAAkB,SAAtB,EAAiC;AAC/BK,QAAAA,KAAK,CAACL,OAAN,GAAgB,MAAhB;AACAK,QAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACC,OAA1B;AACD;AACF,KAXO;AAYR,KAACX,QAAQ,CAACQ,IAAV,GAAkB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnCd,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BY,KAAK,CAACH,UAAhC;AACA,aAAOG,KAAP;AACD;AAfO,GAPmB,CAwB7B;AACA;AAEA;AACA;;AA5B6B,CAAD,CAA9B;AA+BA,MAAM;AAAEG,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBZ,UAA7B;AACA,SAASR,YAAT,EAAuBE,SAAvB;AACA,eAAekB,OAAf","sourcesContent":["import {\n  createAsyncThunk,\n  createSlice,\n  createAction\n} from '@reduxjs/toolkit'\nimport { getUserAccess, postNewUser } from '../utils/asyncActions'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nexport type RegistrationObj = {\n  username: string,\n  email: string,\n  password: string\n}\n\nexport type LoginObj = {\n  user: string,\n  pass: string\n}\n\n\nconst registerUser = createAsyncThunk('users/createUser', async (obj: RegistrationObj) => {\n  return await postNewUser(obj)\n})\n\nconst loginUser = createAsyncThunk('users/login', async (obj: LoginObj) => {\n  console.log({obj})\n  return await getUserAccess(obj)\n})\n\nexport const usersLoading = createAction('users/loading')\nexport const usersReceived = createAction('users/received')\nexport const logUsers = createAction('users/log')\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    currentUser: {},\n    usersArray: []\n  },\n  reducers: {\n    [usersLoading.type] : (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    },\n    [usersReceived.type] : (state, action) => {\n      if (state.loading === 'pending') {\n        state.loading = 'idle'\n        state.usersArray = action.payload\n      }\n    },\n    [logUsers.type] : (state, action) => {\n      console.log('Log Users:', state.usersArray)\n      return state\n    }\n  },\n  // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n\n  //   }\n  // }\n})\n\nconst { actions, reducer } = usersSlice\nexport { registerUser, loginUser }\nexport default reducer"]},"metadata":{},"sourceType":"module"}