{"ast":null,"code":"var _jsxFileName = \"/Users/bradras/Projects/justswap.it/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { connect } from \"react-redux\";\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport LoginPage from '../components/LoginPage';\nimport RegistrationPage from '../components/RegistrationPage';\nimport { createUser } from '../reducers/usersSlice';\nconst App = styled.main.withConfig({\n  displayName: \"pages__App\",\n  componentId: \"p9h2wp-0\"\n})([\"font-size:\", \";text-align:center;form{margin:0 auto;max-width:30rem;display:flex;flex-flow:column nowrap;}legend{margin:1rem auto;font-size:1.2rem;}& > p{margin:1rem 0 0;}\"], ({\n  theme\n}) => theme.fontSize.base);\n\nfunction HomePage(props) {\n  const {\n    0: userObj,\n    1: setUserObj\n  } = useState({});\n  const {\n    0: toggleLogin,\n    1: setToggleLogin\n  } = useState(false);\n  const notLoggedIn = Object.keys(userObj).length === 0;\n  useEffect(() => {\n    if (notLoggedIn) {\n      console.log('Please login.');\n    } else {\n      console.log({\n        userObj\n      });\n    }\n  }, [userObj]);\n\n  const hideRegistration = () => {\n    setToggleLogin(!toggleLogin);\n  };\n\n  return __jsx(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, notLoggedIn ? __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"Welcome to \", props.custom.title), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, props.users[0].username), toggleLogin ? __jsx(React.Fragment, null, __jsx(LoginPage, {\n    setUserObj: setUserObj,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, \"Need to register?\"), __jsx(\"button\", {\n    onClick: hideRegistration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, \"Register\")) : __jsx(React.Fragment, null, __jsx(RegistrationPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, \"Already registered?\"), __jsx(\"button\", {\n    onClick: hideRegistration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"Login\"))) : __jsx(React.Fragment, null, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Logged in\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, JSON.stringify(userObj))));\n}\n\nHomePage.getInitialProps = ({\n  store,\n  isServer,\n  pathname,\n  query\n}) => {\n  store.dispatch(createUser({\n    id: 1,\n    user: 'asdf'\n  }));\n  return {\n    custom: {\n      title: 'JustSwap.it'\n    }\n  }; // pass custom props with an {object} containing key [custom]\n};\n\nexport default connect(state => state)(HomePage);","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/pages/index.tsx"],"names":["connect","useState","useEffect","styled","LoginPage","RegistrationPage","createUser","App","main","theme","fontSize","base","HomePage","props","userObj","setUserObj","toggleLogin","setToggleLogin","notLoggedIn","Object","keys","length","console","log","hideRegistration","custom","title","users","username","JSON","stringify","getInitialProps","store","isServer","pathname","query","dispatch","id","user","state"],"mappings":"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","sourcesContent":["import {connect} from \"react-redux\";\nimport { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport LoginPage from '../components/LoginPage'\nimport RegistrationPage from '../components/RegistrationPage'\nimport { createUser } from '../reducers/usersSlice'\n\nconst App = styled.main`\n  font-size: ${({ theme }) => theme.fontSize.base};\n  text-align: center;\n  form {\n    margin: 0 auto;\n    max-width: 30rem;\n    display: flex;\n    flex-flow: column nowrap;\n  }\n  legend {\n    margin: 1rem auto;\n    font-size: 1.2rem;\n  }\n  & > p {\n    margin: 1rem 0 0 ;\n  }\n  `\n\nfunction HomePage(props) {\n  const [userObj, setUserObj] = useState({})\n  const [toggleLogin, setToggleLogin] = useState(false)\n  const notLoggedIn = Object.keys(userObj).length === 0\n\n  useEffect(() => {\n    if (notLoggedIn) {\n      console.log('Please login.')\n    } else {\n      console.log({userObj})\n    }\n  }, [userObj])\n\n  const hideRegistration = () => {\n    setToggleLogin(!toggleLogin)\n  }\n  \n  return (\n    <App>\n      {\n        notLoggedIn ? (\n        <>\n          <h1>Welcome to {props.custom.title}</h1>\n          <p>{props.users[0].username}</p>\n          {\n            toggleLogin ?\n            <>\n              <LoginPage setUserObj={setUserObj} />\n              <p>Need to register?</p>\n              <button onClick={hideRegistration}>Register</button>\n            </>\n            :\n            <>\n              <RegistrationPage />\n              <p>Already registered?</p>\n              <button onClick={hideRegistration}>Login</button>\n            </>\n          }\n        </>\n        ) : ( \n          <>\n            <p>Logged in</p>\n            <div>{ JSON.stringify(userObj) }</div>\n          </>\n        )\n      }\n    </App>\n  )\n}\n\nHomePage.getInitialProps = ({store, isServer, pathname, query}) => {\n  store.dispatch(createUser({id: 1, user: 'asdf'}));\n  return { custom: {title: 'JustSwap.it'} }; // pass custom props with an {object} containing key [custom]\n}\n\nexport default connect(state => state)(HomePage);"]},"metadata":{},"sourceType":"module"}