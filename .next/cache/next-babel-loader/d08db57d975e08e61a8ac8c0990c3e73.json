{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { postNewUser } from '../utils/asyncActions'; // TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nconst registerUser = createAsyncThunk('users/createUser', async obj => {\n  return await postNewUser(obj);\n});\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    usersArray: []\n  },\n  reducers: {\n    usersLoading(state, action) {\n      if (state.loading === 'idle') {\n        state.loading = 'pending';\n      }\n    },\n\n    usersReceived(state, action) {\n      if (state.loading === 'pending') {\n        state.loading = 'idle';\n        state.usersArray = action.payload;\n      }\n    },\n\n    logUsers(state) {\n      console.log('Log Users:', state);\n      return state;\n    }\n\n  } // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n  //   }\n  // }\n\n});\nconst {\n  actions,\n  reducer\n} = usersSlice;\nexport const {\n  logUsers\n} = actions;\nexport { registerUser };\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["createAsyncThunk","createSlice","postNewUser","registerUser","obj","usersSlice","name","initialState","loading","usersArray","reducers","usersLoading","state","action","usersReceived","payload","logUsers","console","log","actions","reducer"],"mappings":"AAAA,SACEA,gBADF,EAEEC,WAFF,QAGO,kBAHP;AAIA,SAASC,WAAT,QAA4B,uBAA5B,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGH,gBAAgB,CAAC,kBAAD,EAAqB,MAAOI,GAAP,IAAe;AACvE,SAAO,MAAMF,WAAW,CAACE,GAAD,CAAxB;AACD,CAFoC,CAArC;AAIA,MAAMC,UAAU,GAAGJ,WAAW,CAAC;AAC7BK,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,UAAU,EAAE;AAFA,GAFe;AAM7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1B,UAAID,KAAK,CAACJ,OAAN,KAAkB,MAAtB,EAA8B;AAC5BI,QAAAA,KAAK,CAACJ,OAAN,GAAgB,SAAhB;AACD;AACF,KALO;;AAMRM,IAAAA,aAAa,CAACF,KAAD,EAAQC,MAAR,EAAgB;AAC3B,UAAID,KAAK,CAACJ,OAAN,KAAkB,SAAtB,EAAiC;AAC/BI,QAAAA,KAAK,CAACJ,OAAN,GAAgB,MAAhB;AACAI,QAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACE,OAA1B;AACD;AACF,KAXO;;AAYRC,IAAAA,QAAQ,CAACJ,KAAD,EAAQ;AACdK,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,KAA1B;AACA,aAAOA,KAAP;AACD;;AAfO,GANmB,CAuB7B;AACA;AAEA;AACA;;AA3B6B,CAAD,CAA9B;AA8BA,MAAM;AAAEO,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBf,UAA7B;AACA,OAAO,MAAM;AAAEW,EAAAA;AAAF,IAAeG,OAArB;AACP,SAAShB,YAAT;AACA,eAAeiB,OAAf","sourcesContent":["import {\n  createAsyncThunk,\n  createSlice\n} from '@reduxjs/toolkit'\nimport { postNewUser } from '../utils/asyncActions'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\nconst registerUser = createAsyncThunk('users/createUser', async (obj) => {\n  return await postNewUser(obj)\n})\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    usersArray: []\n  },\n  reducers: {\n    usersLoading(state, action) {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    },\n    usersReceived(state, action) {\n      if (state.loading === 'pending') {\n        state.loading = 'idle'\n        state.usersArray = action.payload\n      }\n    },\n    logUsers(state) {\n      console.log('Log Users:', state)\n      return state\n    }\n  },\n  // extraReducers: {\n  //   [registerUser.fulfilled]: (state, action) => {\n\n  //   }\n  // }\n})\n\nconst { actions, reducer } = usersSlice\nexport const { logUsers } = actions\nexport { registerUser }\nexport default reducer"]},"metadata":{},"sourceType":"module"}