{"ast":null,"code":"var _jsxFileName = \"/Users/bradras/Projects/justswap.it/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport LoginPage from '../components/LoginPage';\nimport RegistrationPage from '../components/RegistrationPage';\nvar App = styled.main.withConfig({\n  displayName: \"pages__App\",\n  componentId: \"p9h2wp-0\"\n})([\"font-size:\", \";text-align:center;form{margin:0 auto;max-width:30rem;display:flex;flex-flow:column nowrap;}legend{margin:1rem auto;font-size:1.2rem;}& > p{margin:1rem 0 0;}\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.fontSize.base;\n});\n\nfunction HomePage(props) {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.users;\n  }),\n      currentUser = _useSelector.currentUser; // const [userObj, setUserObj] = useState({})\n\n\n  var _useState = useState(false),\n      toggleLogin = _useState[0],\n      setToggleLogin = _useState[1];\n\n  var notLoggedIn = Object.keys(currentUser).length === 0;\n  useEffect(function () {\n    if (notLoggedIn) {\n      console.log('Please login.');\n    } else {\n      console.log({\n        currentUser: currentUser\n      });\n    }\n  }, [currentUser]);\n\n  var registrationLoginToggle = function registrationLoginToggle() {\n    setToggleLogin(!toggleLogin);\n  };\n\n  return __jsx(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, notLoggedIn ? __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Welcome to \", props.custom.title), toggleLogin ? __jsx(React.Fragment, null, __jsx(LoginPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, \"Need to register?\"), __jsx(\"button\", {\n    onClick: registrationLoginToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, \"Register\")) : __jsx(React.Fragment, null, __jsx(RegistrationPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, \"Already registered?\"), __jsx(\"button\", {\n    onClick: registrationLoginToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, \"Login\"))) : __jsx(React.Fragment, null, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Logged in\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, JSON.stringify(currentUser))));\n}\n\nHomePage.getInitialProps = function (_ref2) {\n  var store = _ref2.store,\n      isServer = _ref2.isServer,\n      pathname = _ref2.pathname,\n      query = _ref2.query;\n  // pass custom props by returning an {object} containing key [custom]\n  return {\n    custom: {\n      title: 'JustSwap.it'\n    }\n  };\n};\n\nexport default connect(function (state) {\n  return state;\n})(HomePage);","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/pages/index.tsx"],"names":["connect","useDispatch","useSelector","useState","useEffect","styled","LoginPage","RegistrationPage","App","main","theme","fontSize","base","HomePage","props","dispatch","state","users","currentUser","toggleLogin","setToggleLogin","notLoggedIn","Object","keys","length","console","log","registrationLoginToggle","custom","title","JSON","stringify","getInitialProps","store","isServer","pathname","query"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AAEA,IAAMC,GAAG,GAAGH,MAAM,CAACI,IAAV;AAAA;AAAA;AAAA,oLACM;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,QAAN,CAAeC,IAA9B;AAAA,CADN,CAAT;;AAkBA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;;AADuB,qBAECC,WAAW,CACjC,UAACc,KAAD;AAAA,WAAsBA,KAAK,CAACC,KAA5B;AAAA,GADiC,CAFZ;AAAA,MAEfC,WAFe,gBAEfA,WAFe,EAMvB;;;AANuB,kBAOef,QAAQ,CAAC,KAAD,CAPvB;AAAA,MAOhBgB,WAPgB;AAAA,MAOHC,cAPG;;AAQvB,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYL,WAAZ,EAAyBM,MAAzB,KAAoC,CAAxD;AAEApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIiB,WAAJ,EAAiB;AACfI,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACR,QAAAA,WAAW,EAAXA;AAAD,OAAZ;AACD;AACF,GANQ,EAMN,CAACA,WAAD,CANM,CAAT;;AAQA,MAAMS,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpCP,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAIA,SACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIE,WAAW,GACX,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBP,KAAK,CAACc,MAAN,CAAaC,KAA7B,CADF,EAGIV,WAAW,GACX,4BACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,EAGE;AAAQ,IAAA,OAAO,EAAEQ,uBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADW,GAOX,4BACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,EAGE;AAAQ,IAAA,OAAO,EAAEA,uBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,CAVJ,CADW,GAmBT,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOG,IAAI,CAACC,SAAL,CAAeb,WAAf,CAAP,CAFF,CArBN,CADF;AA8BD;;AAGDL,QAAQ,CAACmB,eAAT,GAA2B,iBAAwC;AAAA,MAAtCC,KAAsC,SAAtCA,KAAsC;AAAA,MAA/BC,QAA+B,SAA/BA,QAA+B;AAAA,MAArBC,QAAqB,SAArBA,QAAqB;AAAA,MAAXC,KAAW,SAAXA,KAAW;AACjE;AACA,SAAO;AAAER,IAAAA,MAAM,EAAE;AAACC,MAAAA,KAAK,EAAE;AAAR;AAAV,GAAP;AACD,CAHD;;AAKA,eAAe7B,OAAO,CAAC,UAAAgB,KAAK;AAAA,SAAIA,KAAJ;AAAA,CAAN,CAAP,CAAwBH,QAAxB,CAAf","sourcesContent":["import { connect, useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from '../reducers/rootReducer'\nimport { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport LoginPage from '../components/LoginPage'\nimport RegistrationPage from '../components/RegistrationPage'\n\nconst App = styled.main`\n  font-size: ${({ theme }) => theme.fontSize.base};\n  text-align: center;\n  form {\n    margin: 0 auto;\n    max-width: 30rem;\n    display: flex;\n    flex-flow: column nowrap;\n  }\n  legend {\n    margin: 1rem auto;\n    font-size: 1.2rem;\n  }\n  & > p {\n    margin: 1rem 0 0 ;\n  }\n  `\n\nfunction HomePage(props) {\n  const dispatch = useDispatch()\n  const { currentUser } = useSelector(\n    (state: RootState) => state.users\n  )\n\n  // const [userObj, setUserObj] = useState({})\n  const [toggleLogin, setToggleLogin] = useState(false)\n  const notLoggedIn = Object.keys(currentUser).length === 0\n\n  useEffect(() => {\n    if (notLoggedIn) {\n      console.log('Please login.')\n    } else {\n      console.log({currentUser})\n    }\n  }, [currentUser])\n\n  const registrationLoginToggle = () => {\n    setToggleLogin(!toggleLogin)\n  }\n  \n  return (\n    <App>\n      {\n        notLoggedIn ? (\n        <>\n          <h1>Welcome to {props.custom.title}</h1>\n          {\n            toggleLogin ?\n            <>\n              <LoginPage />\n              <p>Need to register?</p>\n              <button onClick={registrationLoginToggle}>Register</button>\n            </>\n            :\n            <>\n              <RegistrationPage />\n              <p>Already registered?</p>\n              <button onClick={registrationLoginToggle}>Login</button>\n            </>\n          }\n        </>\n        ) : ( \n          <>\n            <p>Logged in</p>\n            <div>{ JSON.stringify(currentUser) }</div>\n          </>\n        )\n      }\n    </App>\n  )\n}\n\n\nHomePage.getInitialProps = ({store, isServer, pathname, query}) => {\n  // pass custom props by returning an {object} containing key [custom]\n  return { custom: {title: 'JustSwap.it'} }\n}\n\nexport default connect(state => state)(HomePage);"]},"metadata":{},"sourceType":"module"}