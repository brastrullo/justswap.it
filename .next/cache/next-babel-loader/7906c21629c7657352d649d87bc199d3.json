{"ast":null,"code":"var _jsxFileName = \"/Users/bradras/Projects/justswap.it/components/RegistrationPage.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Input from './Input';\nimport Button from './Button';\nimport mockData from '../mockData.json';\n\nconst RegistrationPage = () => {\n  const registrationInit = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n  const errorMsg = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n  const {\n    0: registrationObj,\n    1: setRegistrationObj\n  } = useState(registrationInit);\n  const {\n    0: errorMsgObj,\n    1: setErrorMsgsObj\n  } = useState(errorMsg);\n  const {\n    0: submitReady,\n    1: setSubmitReady\n  } = useState(false);\n  useEffect(() => {\n    isValid();\n  }, [errorMsgObj]);\n\n  const inputHandler = e => {\n    e.preventDefault();\n    setRegistrationObj(_objectSpread({}, registrationObj, {}, {\n      [e.target.id]: e.target.value\n    }));\n    setMessages(e.target);\n  };\n\n  const isValid = () => {\n    const arr = Object.entries(errorMsgObj);\n    arr.forEach(entry => {\n      const element = document.querySelectorAll(`#${entry[0]}`);\n      element.forEach(item => {\n        if (entry[1].length > 0) {\n          item.classList.add('error');\n          item.classList.remove('success');\n        } else {\n          item.classList.remove('error');\n          item.classList.add('success');\n        }\n      });\n    });\n    const allFieldsFilled = Object.values(registrationObj).every(item => item.length > 0);\n    const isZeroErrors = arr.every(item => item[1].length === 0);\n    setSubmitReady(isZeroErrors && allFieldsFilled);\n  };\n\n  const setMessages = target => {\n    let pattern;\n    let err = '';\n\n    switch (true) {\n      case target.id === 'username':\n        pattern = /^\\w{3,15}$/;\n        !pattern.test(target.value) && (err += 'Username must be between 3-15 characters in length.');\n        !isNameAvailable(target.value) && (err = 'Username taken.');\n        break;\n\n      case target.id === 'email':\n        pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        !pattern.test(target.value) && (err += 'Incorrect email format');\n        !isEmailAvailable(target.value) && (err = 'Email already registered.');\n        break;\n\n      case target.id === 'password' || target.id === 'confirmPassword':\n        const pMatch = target.id === 'password' && registrationObj.confirmPassword === target.value || target.id === 'confirmPassword' && registrationObj.password === target.value;\n        const pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <= 16;\n        !pLengthCorrect && (err += 'Must be 8-16 characters in length. ');\n        !pMatch && (err += 'Passwords must match. ');\n\n      default:\n        break;\n    }\n\n    target.id === 'password' || target.id === 'confirmPassword' ? setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, {\n      confirmPassword: `${err}`\n    })) : setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, {\n      [target.id]: `${err}`\n    }));\n  };\n\n  const isNameAvailable = username => {\n    const getData = mockData;\n    const foundUser = getData.users.filter(user => user.username === username);\n    return foundUser.length === 0;\n  };\n\n  const isEmailAvailable = email => {\n    const getData = mockData;\n    const foundUser = getData.users.filter(user => user.email === email);\n    return foundUser.length === 0;\n  };\n\n  const createUser = obj => {\n    const dataTransformer = data => {\n      return {\n        username: data.username,\n        email: data.email,\n        password: data.password\n      };\n    };\n\n    const data = dataTransformer(obj);\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Content-Type\", \"text/plain\");\n    fetch(\"localhost:8000/api/auth/users/\", {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(data),\n      redirect: 'follow'\n    }).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    createUser(registrationObj);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, __jsx(\"legend\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, \"Register Account\"), __jsx(Input, {\n    id: \"username\",\n    label: \"Username\",\n    min: \"4\",\n    max: \"10\",\n    value: registrationObj.username,\n    error: errorMsgObj.username,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"email\",\n    label: \"Email\",\n    value: registrationObj.email,\n    error: errorMsgObj.email,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    min: \"8\",\n    max: \"16\",\n    autoComplete: \"new-password\",\n    value: registrationObj.password,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"confirmPassword\",\n    label: \"Confirm Password\",\n    type: \"password\",\n    min: \"8\",\n    max: \"16\",\n    autoComplete: \"new-password\",\n    value: registrationObj.confirmPassword,\n    error: errorMsgObj.confirmPassword,\n    onChange: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    onClick: submitHandler,\n    disabled: !submitReady,\n    text: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default RegistrationPage;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/components/RegistrationPage.tsx"],"names":["useState","useEffect","Input","Button","mockData","RegistrationPage","registrationInit","username","email","password","confirmPassword","errorMsg","registrationObj","setRegistrationObj","errorMsgObj","setErrorMsgsObj","submitReady","setSubmitReady","isValid","inputHandler","e","preventDefault","target","id","value","setMessages","arr","Object","entries","forEach","entry","element","document","querySelectorAll","item","length","classList","add","remove","allFieldsFilled","values","every","isZeroErrors","pattern","err","test","isNameAvailable","isEmailAvailable","pMatch","pLengthCorrect","getData","foundUser","users","filter","user","createUser","obj","dataTransformer","data","myHeaders","Headers","append","fetch","method","headers","body","JSON","stringify","redirect","then","response","text","result","console","log","catch","error","submitHandler"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Input from './Input'\nimport Button from './Button'\nimport mockData from '../mockData.json'\n\nconst RegistrationPage = () => {\n  const registrationInit = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }\n\n  const errorMsg = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }\n\n  const [registrationObj, setRegistrationObj] = useState(registrationInit)\n  const [errorMsgObj, setErrorMsgsObj] = useState(errorMsg)\n  const [submitReady, setSubmitReady] = useState(false)\n\n  useEffect(() => {isValid()}, [errorMsgObj])\n\n  const inputHandler = (e) => {\n    e.preventDefault()\n    setRegistrationObj({\n      ...registrationObj,\n      ...{ [e.target.id]: e.target.value }\n    })\n    setMessages(e.target)\n  }\n\n  const isValid = () => {\n    const arr = Object.entries(errorMsgObj)\n    arr.forEach(entry => {\n      const element = document.querySelectorAll(`#${entry[0]}`)\n      element.forEach(item => {\n        if (entry[1].length > 0) {\n          item.classList.add('error')\n          item.classList.remove('success')\n        } else {\n          item.classList.remove('error')\n          item.classList.add('success')\n        }\n      })\n    })\n    const allFieldsFilled = Object.values(registrationObj).every(item => item.length > 0)\n    const isZeroErrors = arr.every(item => item[1].length === 0)\n    setSubmitReady(isZeroErrors && allFieldsFilled)\n  }\n\n  const setMessages = (target) => {\n    let pattern\n    let err = ''\n    switch(true) {\n      case target.id === 'username':\n        pattern = /^\\w{3,15}$/\n        !pattern.test(target.value) &&\n          (err+= 'Username must be between 3-15 characters in length.')\n        !isNameAvailable(target.value) &&\n          (err='Username taken.')\n        break;\n      case target.id === 'email':\n        pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        !pattern.test(target.value) &&\n          (err+= 'Incorrect email format')\n        !isEmailAvailable(target.value) &&\n          (err='Email already registered.')\n        break;\n      case target.id === 'password' || target.id === 'confirmPassword':\n        const pMatch =\n          target.id === 'password' && registrationObj.confirmPassword === target.value ||\n          target.id === 'confirmPassword' && registrationObj.password === target.value\n        const pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <=16\n        !pLengthCorrect && (err+='Must be 8-16 characters in length. ')\n        !pMatch && (err+='Passwords must match. ')\n      default:\n        break;\n    }\n\n    target.id === 'password' || target.id === 'confirmPassword'\n    ? setErrorMsgsObj({...errorMsgObj, ...{ confirmPassword: `${err}`}})\n    : setErrorMsgsObj({...errorMsgObj, ...{ [target.id]: `${err}`}})\n  }\n\n  const isNameAvailable = (username) => {\n    const getData = mockData\n    const foundUser = getData.users.filter(user => user.username === username)\n    return foundUser.length === 0\n  }\n\n  const isEmailAvailable = (email) => {\n    const getData = mockData\n    const foundUser = getData.users.filter(user => user.email === email)\n    return foundUser.length === 0\n  }\n\n  const createUser = (obj) => {\n    const dataTransformer = (data) => {\n      return ({\n        username: data.username,\n        email: data.email,\n        password: data.password\n      })\n    }\n    const data = dataTransformer(obj)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Content-Type\", \"text/plain\");\n    fetch(\"localhost:8000/api/auth/users/\", {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(data),\n      redirect: 'follow'\n    })\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    createUser(registrationObj)\n  }\n\n\n  return (\n    <>\n    <form>\n      <legend>Register Account</legend>\n      <Input\n        id=\"username\"\n        label=\"Username\"\n        min='4'\n        max='10'\n        value={registrationObj.username}\n        error={errorMsgObj.username}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"email\"\n        label=\"Email\"\n        value={registrationObj.email}\n        error={errorMsgObj.email}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        min='8'\n        max='16'\n        autoComplete=\"new-password\"\n        value={registrationObj.password}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"confirmPassword\"\n        label=\"Confirm Password\"\n        type=\"password\"\n        min='8'\n        max='16'\n        autoComplete=\"new-password\"\n        value={registrationObj.confirmPassword}\n        error={errorMsgObj.confirmPassword}\n        onChange={inputHandler}\n      />\n      <Button\n        onClick={submitHandler}\n        disabled={!submitReady}\n        text=\"Submit\"\n      />\n    </form>\n  </>\n  )\n}\n\nexport default RegistrationPage"]},"metadata":{},"sourceType":"module"}