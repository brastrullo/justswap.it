{"ast":null,"code":"import { // createAsyncThunk,\ncreateSlice } from '@reduxjs/toolkit'; // import axios from 'axios'\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n//   const response = await axios.get()\n//   return response.data\n// })\n\nvar usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    usersArray: [{\n      username: 'zxcv'\n    }]\n  },\n  reducers: {\n    logUsers: function logUsers(state) {\n      console.log('Users:', state.usersArray);\n      return state;\n    },\n    createUser: function createUser(state, action) {\n      console.log({\n        state: state,\n        action: action\n      });\n      return state;\n    },\n    updateUser: function updateUser(state, action) {\n      console.log({\n        state: state,\n        action: action\n      });\n      return state;\n    },\n    deleteUser: function deleteUser(state, action) {\n      console.log({\n        state: state,\n        action: action\n      });\n      return state;\n    }\n  },\n  extraReducers: {// [fetchUsers.fulfilled]: (state, action) => {\n    //   // Add user to the state array\n    //   state.users.push(action.payload)\n    // }\n  }\n});\nvar actions = usersSlice.actions,\n    reducer = usersSlice.reducer;\nvar logUsers = actions.logUsers,\n    createUser = actions.createUser,\n    updateUser = actions.updateUser,\n    deleteUser = actions.deleteUser;\nexport { logUsers, createUser, updateUser, deleteUser };\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["createSlice","usersSlice","name","initialState","usersArray","username","reducers","logUsers","state","console","log","createUser","action","updateUser","deleteUser","extraReducers","actions","reducer"],"mappings":"AAAA,SACE;AACAA,WAFF,QAGO,kBAHP,C,CAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,IAAMC,UAAU,GAAGD,WAAW,CAAC;AAC7BE,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE,CAAC;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAD;AADA,GAFe;AAO7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QADQ,oBACCC,KADD,EACQ;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAK,CAACJ,UAA5B;AACA,aAAOI,KAAP;AACD,KAJO;AAKRG,IAAAA,UALQ,sBAKGH,KALH,EAKUI,MALV,EAKkB;AACxBH,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASI,QAAAA,MAAM,EAANA;AAAT,OAAZ;AACA,aAAOJ,KAAP;AACD,KARO;AASRK,IAAAA,UATQ,sBASGL,KATH,EASUI,MATV,EASkB;AACxBH,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASI,QAAAA,MAAM,EAANA;AAAT,OAAZ;AACA,aAAOJ,KAAP;AACD,KAZO;AAaRM,IAAAA,UAbQ,sBAaGN,KAbH,EAaUI,MAbV,EAakB;AACxBH,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,QAAAA,KAAK,EAALA,KAAF;AAASI,QAAAA,MAAM,EAANA;AAAT,OAAZ;AACA,aAAOJ,KAAP;AACD;AAhBO,GAPmB;AAyB7BO,EAAAA,aAAa,EAAE,CACb;AACA;AACA;AACA;AAJa;AAzBc,CAAD,CAA9B;IAiCQC,O,GAAqBf,U,CAArBe,O;IAASC,O,GAAYhB,U,CAAZgB,O;IACFV,Q,GAAiDS,O,CAAjDT,Q;IAAUI,U,GAAuCK,O,CAAvCL,U;IAAYE,U,GAA2BG,O,CAA3BH,U;IAAYC,U,GAAeE,O,CAAfF,U;;AACjD,eAAeG,OAAf","sourcesContent":["import {\n  // createAsyncThunk,\n  createSlice\n} from '@reduxjs/toolkit'\n// import axios from 'axios'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n//   const response = await axios.get()\n//   return response.data\n// })\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    usersArray: [{\n      username: 'zxcv'\n    }]\n  },\n  reducers: {\n    logUsers(state) {\n      console.log('Users:', state.usersArray)\n      return state\n    },\n    createUser(state, action) {\n      console.log({ state, action })\n      return state\n    },\n    updateUser(state, action) {\n      console.log({ state, action })\n      return state\n    },\n    deleteUser(state, action) {\n      console.log({ state, action })\n      return state\n    },\n  },\n  extraReducers: {\n    // [fetchUsers.fulfilled]: (state, action) => {\n    //   // Add user to the state array\n    //   state.users.push(action.payload)\n    // }\n  }\n})\n\nconst { actions, reducer } = usersSlice\nexport const { logUsers, createUser, updateUser, deleteUser } = actions\nexport default reducer"]},"metadata":{},"sourceType":"module"}