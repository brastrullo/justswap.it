{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { // createAsyncThunk,\ncreateSlice } from '@reduxjs/toolkit';\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n//   const response = await axios.get()\n//   return response.data\n// })\nvar usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    usersArray: []\n  },\n  reducers: {\n    usersLoading: function usersLoading(state, action) {\n      if (state.loading === 'idle') {\n        state.loading = 'pending';\n      }\n    },\n    usersReceived: function usersReceived(state, action) {\n      if (state.loading === 'pending') {\n        state.loading = 'idle';\n        state.usersArray = action.payload;\n      }\n    },\n    logUsers: function logUsers(state) {\n      console.log('Log Users:', state);\n      return state;\n    },\n    registerUser: function registerUser(state, action) {\n      state.usersArray = [].concat(_toConsumableArray(state.usersArray), [action.payload]); // return {\n      //   ...state,\n      //   usersArray: [...state.usersArray, action.payload ]\n      // }\n    }\n  },\n  extraReducers: {// [fetchUsers.fulfilled]: (state, action) => {\n    //   // Add user to the state array\n    //   state.users.push(action.payload)\n    // }\n  }\n});\nvar actions = usersSlice.actions,\n    reducer = usersSlice.reducer;\nvar logUsers = actions.logUsers,\n    registerUser = actions.registerUser;\nexport { logUsers, registerUser };\nexport default reducer;","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/reducers/usersSlice.ts"],"names":["createSlice","usersSlice","name","initialState","loading","usersArray","reducers","usersLoading","state","action","usersReceived","payload","logUsers","console","log","registerUser","extraReducers","actions","reducer"],"mappings":";AAAA,SACE;AACAA,WAFF,QAGO,kBAHP;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,IAAMC,UAAU,GAAGD,WAAW,CAAC;AAC7BE,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,UAAU,EAAE;AAFA,GAFe;AAM7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YADQ,wBACKC,KADL,EACYC,MADZ,EACoB;AAC1B,UAAID,KAAK,CAACJ,OAAN,KAAkB,MAAtB,EAA8B;AAC5BI,QAAAA,KAAK,CAACJ,OAAN,GAAgB,SAAhB;AACD;AACF,KALO;AAMRM,IAAAA,aANQ,yBAMMF,KANN,EAMaC,MANb,EAMqB;AAC3B,UAAID,KAAK,CAACJ,OAAN,KAAkB,SAAtB,EAAiC;AAC/BI,QAAAA,KAAK,CAACJ,OAAN,GAAgB,MAAhB;AACAI,QAAAA,KAAK,CAACH,UAAN,GAAmBI,MAAM,CAACE,OAA1B;AACD;AACF,KAXO;AAYRC,IAAAA,QAZQ,oBAYCJ,KAZD,EAYQ;AACdK,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,KAA1B;AACA,aAAOA,KAAP;AACD,KAfO;AAgBRO,IAAAA,YAhBQ,wBAgBKP,KAhBL,EAgBYC,MAhBZ,EAgBoB;AAC1BD,MAAAA,KAAK,CAACH,UAAN,gCAAuBG,KAAK,CAACH,UAA7B,IAAyCI,MAAM,CAACE,OAAhD,GAD0B,CAE1B;AACA;AACA;AACA;AACD;AAtBO,GANmB;AA8B7BK,EAAAA,aAAa,EAAE,CACb;AACA;AACA;AACA;AAJa;AA9Bc,CAAD,CAA9B;IAsCQC,O,GAAqBhB,U,CAArBgB,O;IAASC,O,GAAYjB,U,CAAZiB,O;IACFN,Q,GAA2BK,O,CAA3BL,Q;IAAUG,Y,GAAiBE,O,CAAjBF,Y;;AACzB,eAAeG,OAAf","sourcesContent":["import {\n  // createAsyncThunk,\n  createSlice\n} from '@reduxjs/toolkit'\nimport { postNewUser } from '../utils/asyncActions'\n\n// TYPESCRIPT BUILDER API EXAMPLE\n// createReducer(0, builder =>\n//   builder.addCase(increment, (state, action) => {\n//     // action is inferred correctly here\n//   })\n// )\n\n// export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n//   const response = await axios.get()\n//   return response.data\n// })\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    loading: 'idle',\n    usersArray: []\n  },\n  reducers: {\n    usersLoading(state, action) {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n      }\n    },\n    usersReceived(state, action) {\n      if (state.loading === 'pending') {\n        state.loading = 'idle'\n        state.usersArray = action.payload\n      }\n    },\n    logUsers(state) {\n      console.log('Log Users:', state)\n      return state\n    },\n    registerUser(state, action) {\n      state.usersArray = [...state.usersArray, action.payload ]\n      // return {\n      //   ...state,\n      //   usersArray: [...state.usersArray, action.payload ]\n      // }\n    }\n  },\n  extraReducers: {\n    // [fetchUsers.fulfilled]: (state, action) => {\n    //   // Add user to the state array\n    //   state.users.push(action.payload)\n    // }\n  }\n})\n\nconst { actions, reducer } = usersSlice\nexport const { logUsers, registerUser } = actions\nexport default reducer"]},"metadata":{},"sourceType":"module"}