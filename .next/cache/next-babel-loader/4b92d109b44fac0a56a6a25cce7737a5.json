{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bradras/Projects/justswap.it/components/RegistrationPage.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useDispatch, useSelector, connect } from \"react-redux\";\nimport { useState, useEffect } from 'react';\nimport Input from './Input';\nimport Button from './Button';\nimport { registerUser } from '../reducers/usersSlice';\nimport mockData from '../mockData.json';\n\nvar RegistrationPage = function RegistrationPage(props) {\n  var registrationInit = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n  var errorMsg = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  };\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.users;\n  }),\n      loading = _useSelector.loading,\n      usersArray = _useSelector.usersArray;\n\n  var _useState = useState(registrationInit),\n      registrationObj = _useState[0],\n      setRegistrationObj = _useState[1];\n\n  var _useState2 = useState(errorMsg),\n      errorMsgObj = _useState2[0],\n      setErrorMsgsObj = _useState2[1];\n\n  var _useState3 = useState(false),\n      submitReady = _useState3[0],\n      setSubmitReady = _useState3[1];\n\n  useEffect(function () {\n    isValid();\n  }, [errorMsgObj]);\n\n  var inputHandler = function inputHandler(e) {\n    e.preventDefault();\n    setRegistrationObj(_objectSpread({}, registrationObj, {}, _defineProperty({}, e.target.id, e.target.value)));\n    setMessages(e.target);\n  };\n\n  var isValid = function isValid() {\n    var arr = Object.entries(errorMsgObj);\n    arr.forEach(function (entry) {\n      var element = document.querySelectorAll(\"#\".concat(entry[0]));\n      element.forEach(function (item) {\n        if (entry[1].length > 0) {\n          item.classList.add('error');\n          item.classList.remove('success');\n        } else {\n          item.classList.remove('error');\n          item.classList.add('success');\n        }\n      });\n    });\n    var allFieldsFilled = Object.values(registrationObj).every(function (item) {\n      return item.length > 0;\n    });\n    var isZeroErrors = arr.every(function (item) {\n      return item[1].length === 0;\n    });\n    setSubmitReady(isZeroErrors && allFieldsFilled);\n  };\n\n  var setMessages = function setMessages(target) {\n    var pattern;\n    var err = '';\n\n    switch (true) {\n      case target.id === 'username':\n        pattern = /^\\w{3,15}$/;\n        !pattern.test(target.value) && (err += 'Username must be between 3-15 characters in length.');\n        !isNameAvailable(target.value) && (err = 'Username taken.');\n        break;\n\n      case target.id === 'email':\n        pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        !pattern.test(target.value) && (err += 'Incorrect email format');\n        !isEmailAvailable(target.value) && (err = 'Email already registered.');\n        break;\n\n      case target.id === 'password' || target.id === 'confirmPassword':\n        var pMatch = target.id === 'password' && registrationObj.confirmPassword === target.value || target.id === 'confirmPassword' && registrationObj.password === target.value;\n        var pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <= 16;\n        !pLengthCorrect && (err += 'Must be 8-16 characters in length. ');\n        !pMatch && (err += 'Passwords must match. ');\n\n      default:\n        break;\n    }\n\n    target.id === 'password' || target.id === 'confirmPassword' ? setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, {\n      confirmPassword: \"\".concat(err)\n    })) : setErrorMsgsObj(_objectSpread({}, errorMsgObj, {}, _defineProperty({}, target.id, \"\".concat(err))));\n  };\n\n  var isNameAvailable = function isNameAvailable(username) {\n    var getData = mockData;\n    var foundUser = getData.users.filter(function (user) {\n      return user.username === username;\n    });\n    return foundUser.length === 0;\n  };\n\n  var isEmailAvailable = function isEmailAvailable(email) {\n    var getData = mockData;\n    var foundUser = getData.users.filter(function (user) {\n      return user.email === email;\n    });\n    return foundUser.length === 0;\n  };\n\n  var submitHandler = function submitHandler(e) {\n    e.preventDefault();\n    store.dispatch(registerUser(registrationObj));\n  };\n\n  console.log({\n    loading: loading\n  });\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, __jsx(\"legend\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, \"Register Account\"), __jsx(Input, {\n    id: \"username\",\n    label: \"Username\",\n    min: \"4\",\n    max: \"10\",\n    value: registrationObj.username,\n    error: errorMsgObj.username,\n    onChange: inputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"email\",\n    label: \"Email\",\n    value: registrationObj.email,\n    error: errorMsgObj.email,\n    onChange: inputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    min: \"8\",\n    max: \"16\",\n    autoComplete: \"new-password\",\n    value: registrationObj.password,\n    onChange: inputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: \"confirmPassword\",\n    label: \"Confirm Password\",\n    type: \"password\",\n    min: \"8\",\n    max: \"16\",\n    autoComplete: \"new-password\",\n    value: registrationObj.confirmPassword,\n    error: errorMsgObj.confirmPassword,\n    onChange: inputHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    onClick: submitHandler,\n    disabled: !submitReady,\n    text: \"Submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default connect(function (state) {\n  return state;\n})(RegistrationPage);","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/components/RegistrationPage.tsx"],"names":["useDispatch","useSelector","connect","useState","useEffect","Input","Button","registerUser","mockData","RegistrationPage","props","registrationInit","username","email","password","confirmPassword","errorMsg","dispatch","state","users","loading","usersArray","registrationObj","setRegistrationObj","errorMsgObj","setErrorMsgsObj","submitReady","setSubmitReady","isValid","inputHandler","e","preventDefault","target","id","value","setMessages","arr","Object","entries","forEach","entry","element","document","querySelectorAll","item","length","classList","add","remove","allFieldsFilled","values","every","isZeroErrors","pattern","err","test","isNameAvailable","isEmailAvailable","pMatch","pLengthCorrect","getData","foundUser","filter","user","submitHandler","store","console","log"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector, connect} from \"react-redux\";\nimport { useState, useEffect } from 'react'\nimport Input from './Input'\nimport Button from './Button'\nimport { RootState } from '../reducers/rootReducer'\nimport { registerUser } from '../reducers/usersSlice'\nimport mockData from '../mockData.json'\n\nconst RegistrationPage = (props) => {\n  const registrationInit = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }\n\n  const errorMsg = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  }\n\n  const dispatch = useDispatch()\n  const { loading, usersArray } = useSelector(\n    (state: RootState) => state.users\n  )\n\n  const [registrationObj, setRegistrationObj] = useState(registrationInit)\n  const [errorMsgObj, setErrorMsgsObj] = useState(errorMsg)\n  const [submitReady, setSubmitReady] = useState(false)\n\n  useEffect(() => {isValid()}, [errorMsgObj])\n\n  const inputHandler = (e) => {\n    e.preventDefault()\n    setRegistrationObj({\n      ...registrationObj,\n      ...{ [e.target.id]: e.target.value }\n    })\n    setMessages(e.target)\n  }\n\n  const isValid = () => {\n    const arr = Object.entries(errorMsgObj)\n    arr.forEach(entry => {\n      const element = document.querySelectorAll(`#${entry[0]}`)\n      element.forEach(item => {\n        if (entry[1].length > 0) {\n          item.classList.add('error')\n          item.classList.remove('success')\n        } else {\n          item.classList.remove('error')\n          item.classList.add('success')\n        }\n      })\n    })\n    const allFieldsFilled = Object.values(registrationObj).every(item => item.length > 0)\n    const isZeroErrors = arr.every(item => item[1].length === 0)\n    setSubmitReady(isZeroErrors && allFieldsFilled)\n  }\n\n  const setMessages = (target) => {\n    let pattern\n    let err = ''\n    switch(true) {\n      case target.id === 'username':\n        pattern = /^\\w{3,15}$/\n        !pattern.test(target.value) &&\n          (err+= 'Username must be between 3-15 characters in length.')\n        !isNameAvailable(target.value) &&\n          (err='Username taken.')\n        break;\n      case target.id === 'email':\n        pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        !pattern.test(target.value) &&\n          (err+= 'Incorrect email format')\n        !isEmailAvailable(target.value) &&\n          (err='Email already registered.')\n        break;\n      case target.id === 'password' || target.id === 'confirmPassword':\n        const pMatch =\n          target.id === 'password' && registrationObj.confirmPassword === target.value ||\n          target.id === 'confirmPassword' && registrationObj.password === target.value\n        const pLengthCorrect = registrationObj.password.length >= 8 && registrationObj.password.length <=16\n        !pLengthCorrect && (err+='Must be 8-16 characters in length. ')\n        !pMatch && (err+='Passwords must match. ')\n      default:\n        break;\n    }\n\n    target.id === 'password' || target.id === 'confirmPassword'\n    ? setErrorMsgsObj({...errorMsgObj, ...{ confirmPassword: `${err}`}})\n    : setErrorMsgsObj({...errorMsgObj, ...{ [target.id]: `${err}`}})\n  }\n\n  const isNameAvailable = (username) => {\n    const getData = mockData\n    const foundUser = getData.users.filter(user => user.username === username)\n    return foundUser.length === 0\n  }\n\n  const isEmailAvailable = (email) => {\n    const getData = mockData\n    const foundUser = getData.users.filter(user => user.email === email)\n    return foundUser.length === 0\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    store.dispatch(registerUser(registrationObj))\n  }\n\n  console.log({loading})\n\n  return (\n    <>\n    <form>\n      <legend>Register Account</legend>\n      <Input\n        id=\"username\"\n        label=\"Username\"\n        min='4'\n        max='10'\n        value={registrationObj.username}\n        error={errorMsgObj.username}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"email\"\n        label=\"Email\"\n        value={registrationObj.email}\n        error={errorMsgObj.email}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        min='8'\n        max='16'\n        autoComplete=\"new-password\"\n        value={registrationObj.password}\n        onChange={inputHandler}\n      />\n      <Input\n        id=\"confirmPassword\"\n        label=\"Confirm Password\"\n        type=\"password\"\n        min='8'\n        max='16'\n        autoComplete=\"new-password\"\n        value={registrationObj.confirmPassword}\n        error={errorMsgObj.confirmPassword}\n        onChange={inputHandler}\n      />\n      <Button\n        onClick={submitHandler}\n        disabled={!submitReady}\n        text=\"Submit\"\n      />\n    </form>\n  </>\n  )\n}\n\nexport default connect(state => state)(RegistrationPage);"]},"metadata":{},"sourceType":"module"}