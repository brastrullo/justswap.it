{"ast":null,"code":"var _jsxFileName = \"/Users/bradras/Projects/justswap.it/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { connect } from \"react-redux\";\nimport { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport LoginPage from '../components/LoginPage';\nimport RegistrationPage from '../components/RegistrationPage';\nimport { createUser } from '../reducers/usersSlice';\nvar App = styled.main.withConfig({\n  displayName: \"pages__App\",\n  componentId: \"p9h2wp-0\"\n})([\"font-size:\", \";text-align:center;form{margin:0 auto;max-width:30rem;display:flex;flex-flow:column nowrap;}legend{margin:1rem auto;font-size:1.2rem;}& > p{margin:1rem 0 0;}\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.fontSize.base;\n});\n\nfunction HomePage(props) {\n  var _useState = useState({}),\n      userObj = _useState[0],\n      setUserObj = _useState[1];\n\n  var _useState2 = useState(false),\n      toggleLogin = _useState2[0],\n      setToggleLogin = _useState2[1];\n\n  var notLoggedIn = Object.keys(userObj).length === 0;\n  useEffect(function () {\n    if (notLoggedIn) {\n      console.log('Please login.');\n    } else {\n      console.log({\n        userObj: userObj\n      });\n    }\n  }, [userObj]);\n\n  var hideRegistration = function hideRegistration() {\n    setToggleLogin(!toggleLogin);\n  };\n\n  return __jsx(App, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, notLoggedIn ? __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"Welcome to \", props.custom.title), toggleLogin ? __jsx(React.Fragment, null, __jsx(LoginPage, {\n    setUserObj: setUserObj,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, \"Need to register?\"), __jsx(\"button\", {\n    onClick: hideRegistration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, \"Register\")) : __jsx(React.Fragment, null, __jsx(RegistrationPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, \"Already registered?\"), __jsx(\"button\", {\n    onClick: hideRegistration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"Login\"))) : __jsx(React.Fragment, null, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Logged in\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, JSON.stringify(userObj))));\n}\n\nHomePage.getInitialProps = function (_ref2) {\n  var store = _ref2.store,\n      isServer = _ref2.isServer,\n      pathname = _ref2.pathname,\n      query = _ref2.query;\n  store.dispatch(createUser({\n    id: 1,\n    username: 'asdf'\n  }));\n  return {\n    custom: {\n      title: 'JustSwap.it'\n    }\n  }; // pass custom props with an {object} containing key [custom]\n};\n\nexport default connect(function (state) {\n  return state;\n})(HomePage);","map":{"version":3,"sources":["/Users/bradras/Projects/justswap.it/pages/index.tsx"],"names":["connect","useState","useEffect","styled","LoginPage","RegistrationPage","createUser","App","main","theme","fontSize","base","HomePage","props","userObj","setUserObj","toggleLogin","setToggleLogin","notLoggedIn","Object","keys","length","console","log","hideRegistration","custom","title","JSON","stringify","getInitialProps","store","isServer","pathname","query","dispatch","id","username","state"],"mappings":"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","sourcesContent":["import {connect} from \"react-redux\";\nimport { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport LoginPage from '../components/LoginPage'\nimport RegistrationPage from '../components/RegistrationPage'\nimport { createUser } from '../reducers/usersSlice'\n\nconst App = styled.main`\n  font-size: ${({ theme }) => theme.fontSize.base};\n  text-align: center;\n  form {\n    margin: 0 auto;\n    max-width: 30rem;\n    display: flex;\n    flex-flow: column nowrap;\n  }\n  legend {\n    margin: 1rem auto;\n    font-size: 1.2rem;\n  }\n  & > p {\n    margin: 1rem 0 0 ;\n  }\n  `\n\nfunction HomePage(props) {\n  const [userObj, setUserObj] = useState({})\n  const [toggleLogin, setToggleLogin] = useState(false)\n  const notLoggedIn = Object.keys(userObj).length === 0\n\n  useEffect(() => {\n    if (notLoggedIn) {\n      console.log('Please login.')\n    } else {\n      console.log({userObj})\n    }\n  }, [userObj])\n\n  const hideRegistration = () => {\n    setToggleLogin(!toggleLogin)\n  }\n  \n  return (\n    <App>\n      {\n        notLoggedIn ? (\n        <>\n          <h1>Welcome to {props.custom.title}</h1>\n          {/* <p>{props.users[0].username}</p> */}\n          {\n            toggleLogin ?\n            <>\n              <LoginPage setUserObj={setUserObj} />\n              <p>Need to register?</p>\n              <button onClick={hideRegistration}>Register</button>\n            </>\n            :\n            <>\n              <RegistrationPage />\n              <p>Already registered?</p>\n              <button onClick={hideRegistration}>Login</button>\n            </>\n          }\n        </>\n        ) : ( \n          <>\n            <p>Logged in</p>\n            <div>{ JSON.stringify(userObj) }</div>\n          </>\n        )\n      }\n    </App>\n  )\n}\n\nHomePage.getInitialProps = ({store, isServer, pathname, query}) => {\n  store.dispatch(createUser({id: 1, username: 'asdf'}));\n  return { custom: {title: 'JustSwap.it'} }; // pass custom props with an {object} containing key [custom]\n}\n\nexport default connect(state => state)(HomePage);"]},"metadata":{},"sourceType":"module"}